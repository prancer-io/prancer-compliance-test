{
    "testSet": [
        {
            "masterTestName": "AZURE_terraform_TEST",
            "version": "0.1",
            "cases": [
                {
                    "masterTestId": "TEST_ROLE",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(roles.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-ARD-001",
                            "eval": "data.rule.no_cusRtom_subs_owner_role_created",
                            "message": "data.rule.no_custom_subs_owner_role_created_err",
                            "remediationDescription": "In 'azurerm_role_definition' resource, make sure 'permissions' blocks 'actions' array dont have '*' as entry to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/role_definition#actions' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_ARD_001.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Custom Role Definition should not create subscription owner role",
                    "description": "Manages a custom Role Definition, used to assign Roles to Users/Principals. This policy will identify custom role definition which has action permission set to subscription owner and alert if exist.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_role_definition"
                    ]
                },
                {
                    "masterTestId": "TEST_ACTIVITY_LOG_ALERT_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(activitylogalerts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-MNT-001",
                            "eval": "data.rule.azure_monitor_activity_log_alert_enabled",
                            "message": "data.rule.azure_monitor_activity_log_alert_enabled_err",
                            "remediationDescription": "In 'azurerm_monitor_activity_log_alert' resource, set 'enabled = true' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/monitor_activity_log_alert#enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_MNT_001.py"
                        }
                    ],
                    "severity": "Low",
                    "title": "Activity log alerts should be enabled",
                    "description": "Activity log alerts are alerts that activate when a new activity log event occurs that matches the conditions specified in the alert. Based on the order and volume of the events recorded in Azure activity log, the alert rule will fire. Enabling Activity log alerts will allow Azure to send you emails about any high severity alerts in your environment. This will make sure that you are aware of any security issues and take prompt actions to mitigate the risks.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HIPAA",
                                "ISO",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_monitor_activity_log_alert",
                        "azurerm_monitor_log_profile"
                    ]
                },
                {
                    "masterTestId": "TEST_ACTIVITY_LOG_ALERT_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(activitylogalerts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-MNT-011",
                            "eval": "data.rule.azure_monitor_log_profile_retention",
                            "message": "data.rule.azure_monitor_log_profile_retention_err",
                            "remediationDescription": "In 'azurerm_monitor_log_profile' resource, set days = '365' under 'retention_policy' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/monitor_log_profile#days' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_MNT_011.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure Activity log profile retention is set to 365 days or greater",
                    "description": "This policy identifies azurerm_monitor_log_profile which have log retention less than 365 days. Activity Logs can be used to check for anomalies and gives insight into suspected breaches or misuse of information and access.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_monitor_activity_log_alert",
                        "azurerm_monitor_log_profile"
                    ]
                },
                {
                    "masterTestId": "TEST_ACTIVITY_LOG_ALERT_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(activitylogalerts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-MNT-012",
                            "eval": "data.rule.azure_monitor_log_profile_retention_enabled",
                            "message": "data.rule.azure_monitor_log_profile_retention_enabled_err",
                            "remediationDescription": "In 'azurerm_monitor_log_profile' resource, set 'enabled = true' under 'retention_policy' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/monitor_log_profile#enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_MNT_012.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Activity log profile retention should be enabled",
                    "description": "This policy identifies azurerm_monitor_log_profile which dont have log retention enabled. Activity Logs can be used to check for anomalies and gives insight into suspected breaches or misuse of information and access.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_monitor_activity_log_alert",
                        "azurerm_monitor_log_profile"
                    ]
                },
                {
                    "masterTestId": "TEST_ACTIVITY_LOG_ALERT_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(activitylogalerts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-MNT-013",
                            "eval": "data.rule.azure_monitor_log_profile_capture_all_activities",
                            "message": "data.rule.azure_monitor_log_profile_capture_all_activities_err",
                            "remediationDescription": "In 'azurerm_monitor_log_profile' resource, make sure 'categories' array exist and contains at least ['Action','Delete','Write'] as value to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/monitor_log_profile#categories' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_MNT_013.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Activity log audit profile should configure to capture all the activities",
                    "description": "This policy identifies azurerm_monitor_log_profile which dont capture all type of activities. Activity Logs can be used to check for anomalies and gives insight into suspected breaches or misuse of information and access.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_monitor_activity_log_alert",
                        "azurerm_monitor_log_profile"
                    ]
                },
                {
                    "masterTestId": "TEST_AKS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(aks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AKS-001",
                            "eval": "data.rule.aks_cni_net",
                            "message": "data.rule.aks_cni_net_err",
                            "remediationDescription": "In 'azurerm_kubernetes_cluster' resource, set network_plugin = 'azure' under 'network_profile' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/kubernetes_cluster#network_policy' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AKS_001.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure AKS cluster CNI networking should be enabled",
                    "description": "Azure CNI provides the following features over kubenet networking:<br><br>- Every pod in the cluster is assigned an IP address in the virtual network. The pods can directly communicate with other pods in the cluster, and other nodes in the virtual network.<br>- Pods in a subnet that have service endpoints enabled can securely connect to Azure services, such as Azure Storage and SQL DB.<br>- You can create user-defined routes (UDR) to route traffic from pods to a Network Virtual Appliance.<br>- Support for Network Policies securing communication between pods.<br><br>This policy checks your AKS cluster for the Azure CNI network plugin and generates an alert if not found.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_kubernetes_cluster"
                    ]
                },
                {
                    "masterTestId": "TEST_AKS_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(aks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AKS-002",
                            "eval": "data.rule.aks_http_routing",
                            "message": "data.rule.aks_http_routing_err",
                            "remediationDescription": "In 'azurerm_kubernetes_cluster' resource, set enabled = false under 'http_application_routing' block which exist under 'addon_profile' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/kubernetes_cluster#http_application_routing' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AKS_002.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure AKS cluster HTTP application routing should be disabled",
                    "description": "HTTP application routing configures an Ingress controller in your AKS cluster. As applications are deployed, the solution also creates publicly accessible DNS names for application endpoints. While this makes it easy to access applications that are deployed to your Azure AKS cluster, this add-on is not recommended for production use.<br><br>This policy checks your AKS cluster HTTP application routing add-on setting and alerts if enabled.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_kubernetes_cluster"
                    ]
                },
                {
                    "masterTestId": "TEST_AKS_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(aks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AKS-003",
                            "eval": "data.rule.aks_monitoring",
                            "message": "data.rule.aks_monitoring_err",
                            "remediationDescription": "In 'azurerm_kubernetes_cluster' resource, set enabled = true under 'oms_agent' which exist under 'addon_profile' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/kubernetes_cluster#oms_agent' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AKS_003.py"
                        }
                    ],
                    "severity": "Low",
                    "title": "Azure AKS cluster monitoring should be enabled",
                    "description": "Azure Monitor for containers is a feature designed to monitor the performance of container workloads deployed to either Azure Container Instances or managed Kubernetes clusters hosted on Azure Kubernetes Service (AKS). Monitoring your containers is critical, especially when you're running a production cluster, at scale, with multiple applications.<br><br>This policy checks your AKS cluster monitoring add-on setting and alerts if no configuration is found, or monitoring is disabled.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_kubernetes_cluster"
                    ]
                },
                {
                    "masterTestId": "TEST_AKS_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(aks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AKS-004",
                            "eval": "data.rule.aks_nodes",
                            "message": "data.rule.aks_nodes_err",
                            "remediationDescription": "In 'azurerm_kubernetes_cluster' resource, set node_count = 3 under 'default_node_pool' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/kubernetes_cluster#node_count' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AKS_004.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure AKS cluster pool profile should have minimum 3 or more nodes",
                    "description": "Ensure your AKS cluster pool profile contains minimum 3 or more nodes. This is recommended for a more resilient cluster. (Clusters smaller than 3 may experience downtime during upgrades.)<br><br>This policy checks the size of your cluster pool profiles and alerts if there are fewer than 3 nodes.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_kubernetes_cluster"
                    ]
                },
                {
                    "masterTestId": "TEST_AKS_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(aks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AKS-005",
                            "eval": "data.rule.aks_rbac",
                            "message": "data.rule.aks_rbac_err",
                            "remediationDescription": "In 'azurerm_kubernetes_cluster' resource, set enabled = true under 'role_based_access_control' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/kubernetes_cluster#role_based_access_control' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AKS_005.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure AKS role-based access control (RBAC) should be enforced",
                    "description": "To provide granular filtering of the actions that users can perform, Kubernetes uses role-based access controls (RBAC). This control mechanism lets you assign users, or groups of users, permission to do things like create or modify resources, or view logs from running application workloads. These permissions can be scoped to a single namespace, or granted across the entire AKS cluster.<br><br>This policy checks your AKS cluster RBAC setting and alerts if disabled.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_kubernetes_cluster"
                    ]
                },
                {
                    "masterTestId": "TEST_AKS_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(aks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AKS-006",
                            "eval": "data.rule.aks_aad_rbac_enabled",
                            "message": "data.rule.aks_aad_rbac_enabled_err",
                            "remediationDescription": "In 'azurerm_kubernetes_cluster' resource, set role_based_access_control.azure_active_directory.managed = true to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/kubernetes_cluster#role_based_access_control' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AKS_006.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Managed Azure AD RBAC for AKS cluster should be enabled",
                    "description": "Azure Kubernetes Service (AKS) can be configured to use Azure Active Directory (AD) for user authentication. In this configuration, you sign in to an AKS cluster using an Azure AD authentication token. You can also configure Kubernetes role-based access control (Kubernetes RBAC) to limit access to cluster resources based a user's identity or group membership. This policy checks your AKS cluster Azure Active Directory (AD) RBAC setting and alerts if disabled.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_kubernetes_cluster"
                    ]
                },
                {
                    "masterTestId": "TEST_AKS_7",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(aks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AKS-008",
                            "eval": "data.rule.aks_network_policy_configured",
                            "message": "data.rule.aks_network_policy_configured_err",
                            "remediationDescription": "In 'azurerm_kubernetes_cluster' resource, set network_policy = 'azure' under 'network_profile' to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/kubernetes_cluster#network_policy' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AKS_008.py"
                        }
                    ],
                    "severity": "Low",
                    "title": "AKS cluster shoud have Network Policy configured",
                    "description": "Network policy used for building Kubernetes network. - calico or azure.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_kubernetes_cluster"
                    ]
                },
                {
                    "masterTestId": "TEST_AKS_8",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(aks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AKS-007",
                            "eval": "data.rule.aks_api_server_authorized_ip_range_enabled",
                            "message": "data.rule.aks_api_server_authorized_ip_range_enabled_err",
                            "remediationDescription": "In 'azurerm_kubernetes_cluster' resource, make sure property 'api_server_authorized_ip_ranges' exist and its value has valid ip range to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/kubernetes_cluster#api_server_authorized_ip_ranges' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AKS_007.py"
                        }
                    ],
                    "severity": "Low",
                    "title": "AKS shoud have an API Server Authorized IP Ranges enabled",
                    "description": "Authorized IP Ranges to kubernetes API server",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_kubernetes_cluster"
                    ]
                },
                {
                    "masterTestId": "TEST_AKS_9",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(aks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AKS-009",
                            "eval": "data.rule.aks_kub_dashboard_disabled",
                            "message": "data.rule.aks_kub_dashboard_disabled_err",
                            "remediationDescription": "In 'azurerm_kubernetes_cluster' resource, set 'kube_dashboard.enabled = true' under 'addon_profile' block to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/kubernetes_cluster#kube_dashboard' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AKS_009.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Kubernetes Dashboard shoud be disabled",
                    "description": "Disable the Kubernetes dashboard on Azure Kubernetes Service",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_kubernetes_cluster"
                    ]
                },
                {
                    "masterTestId": "TEST_APPLICATION_GATEWAYS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(applicationgateways.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AGW-001",
                            "eval": "data.rule.gw_tls",
                            "message": "data.rule.gw_tls_err",
                            "remediationDescription": "In 'azurerm_application_gateway' resource, set min_protocol_version = 'TLSv1_2' under 'ssl_policy' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/application_gateway#min_protocol_version' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AGW_001.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Application Gateway should use TLSv1.2 as minimum version or higher",
                    "description": "The Application Gateway supports end-to-end SSL encryption using multiple TLS versions and by default, it supports TLS version 1.0 as the minimum version.<br><br>This policy identifies the Application Gateway instances that are configured to use TLS versions 1.1 or lower as the minimum protocol version. As a best practice set the MinProtocolVersion to TLSv1.2 (if you use custom SSL policy) or use the predefined AppGwSslPolicy20170401S policy.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_application_gateway"
                    ]
                },
                {
                    "masterTestId": "TEST_APPLICATION_GATEWAYS_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(applicationgateways.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AGW-002",
                            "eval": "data.rule.gw_waf",
                            "message": "data.rule.gw_waf_err",
                            "remediationDescription": "In 'azurerm_application_gateway' resource, set enabled = true under 'waf_configuration' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/application_gateway#waf_configuration' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AGW_002.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Application Gateway should have Web application firewall (WAF) enabled",
                    "description": "This policy identifies Azure Application Gateways that do not have Web application firewall (WAF) enabled. As a best practice, enable WAF to manage and protect your web applications behind the Application Gateway from common exploits and vulnerabilities.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_application_gateway"
                    ]
                },
                {
                    "masterTestId": "TEST_APPLICATION_GATEWAYS_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(applicationgateways.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AGW-003",
                            "eval": "data.rule.https_protocol",
                            "message": "data.rule.https_protocol_err",
                            "remediationDescription": "In 'azurerm_application_gateway' resource, set protocol = 'https' under 'http_listener' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/application_gateway#protocol' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AGW_003.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure Application Gateway is using Https protocol",
                    "description": "Application Gateway allows to set network protocols Http and Https. It is highly recommended to use Https protocol for secure connections.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_application_gateway"
                    ]
                },
                {
                    "masterTestId": "TEST_APPLICATION_GATEWAYS_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(applicationgateways.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AGW-004",
                            "eval": "data.rule.frontendPublicIPConfigurationsDisabled",
                            "message": "data.rule.frontendPublicIPConfigurationsDisabled_err",
                            "remediationDescription": "For resource type 'azurerm_application_gateway' make sure 'public_ip_address_id' does not exist under 'frontend_ip_configuration' to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/application_gateway#frontend_ip_configuration' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AGW_004.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure Application Gateway frontendIPConfigurations does not have public ip configured",
                    "description": "Application Gateway allows to set public or private ip in frontendIPConfigurations. It is highly recommended to only configure private ip in frontendIPConfigurations.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_application_gateway"
                    ]
                },
                {
                    "masterTestId": "TEST_APPLICATION_GATEWAYS_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(applicationgateways.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AGW-005",
                            "eval": "data.rule.backend_https_protocol_enabled",
                            "message": "data.rule.backend_https_protocol_enabled_err",
                            "remediationDescription": "For resource type 'azurerm_application_gateway' make sure 'protocol' has value 'https' under 'backend_http_settings' to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/application_gateway#backend_http_settings' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AGW_005.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure Application Gateway Backend is using Https protocol",
                    "description": "Application Gateway allows to set backend network protocols Http and Https. It is highly recommended to use Https protocol for secure connections.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_application_gateway"
                    ]
                },
                {
                    "masterTestId": "TEST_APPLICATION_GATEWAYS_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(applicationgateways.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AGW-006",
                            "eval": "data.rule.secret_certificate_is_in_keyvalut",
                            "message": "data.rule.secret_certificate_is_in_keyvalut_err",
                            "remediationDescription": "For resource type 'azurerm_application_gateway' make sure 'key_vault_secret_id' has target key vault id under 'ssl_certificate' to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/application_gateway#key_vault_secret_id' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AGW_006.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure Application Gateway secret certificates stores in keyvault",
                    "description": "This policy will identify application gateways which dont have ssl certificates stored in keyvalut and alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_application_gateway"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-005",
                            "eval": "data.rule.app_service_auth_enabled",
                            "message": "data.rule.app_service_auth_enabled_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, set 'enabled = true' under 'auth_settings' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_005.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure Azure App Service Authentication is enabled",
                    "description": "This policy will identify the Azure app service which dont have authentication enabled and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-001",
                            "eval": "data.rule.app_service_https_only",
                            "message": "data.rule.app_service_https_only_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, set 'https_only = true' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#https_only' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_001.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure Azure App Service only be accessed via HTTPS",
                    "description": "This policy will identify the Azure app service which dont have a configuration to allow access only over HTTPS protocol and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-002",
                            "eval": "data.rule.app_service_latest_tls_configured",
                            "message": "data.rule.app_service_latest_tls_configured_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, either remove property 'min_tls_version' or set min_tls_version = '1.2' under 'site_config' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#min_tls_version' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_002.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure Azure App Service has latest version of tls configured",
                    "description": "This policy will identify the Azure app service which dont have latest version of tls configured and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-018",
                            "eval": "data.rule.app_service_aad_auth_enabled",
                            "message": "data.rule.app_service_aad_auth_enabled_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, make sure 'active_directory' block exist with proper configuration properties under 'auth_settings' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#active_directory' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_018.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure Azure App Service AAD authentication is enabled",
                    "description": "This policy will identify the Azure app service which dont have AAD authentication enabled and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-003",
                            "eval": "data.rule.app_service_client_cert_enabled",
                            "message": "data.rule.app_service_client_cert_enabled_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, set 'client_cert_enabled = true' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#client_cert_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_003.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure Azure App Service require client certificates for incoming requests",
                    "description": "This policy will identify the Azure app service which has missing configuration about requiring client certificates for incoming requests and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-004",
                            "eval": "data.rule.app_service_uses_http_two",
                            "message": "data.rule.app_service_uses_http_two_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, set 'http2_enabled = true' under 'site_config' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#http2_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_004.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure Azure App Service has latest http2 protocol enabled",
                    "description": "This policy will identify the Azure app service which dont have latest http2 protocol enabled and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_7",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-006",
                            "eval": "data.rule.app_service_cors_not_allowing_all",
                            "message": "data.rule.app_service_cors_not_allowing_all_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, dont set '*' as value to 'allowed_origins' under 'cors' block which exists under 'site_config' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#allowed_origins' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_006.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure CORS configuration is not allowing every resources to access Azure App Service",
                    "description": "This policy will identify CORS configuration which are allowing every resoruces to access Azure app service and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_8",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-007",
                            "eval": "data.rule.app_service_http_logging_enabled",
                            "message": "data.rule.app_service_http_logging_enabled_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, make sure 'http_logs' block exist under 'logs' block to fix the issue. Visit https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#http_logs for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_007.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure App Service http logging should be enabled",
                    "description": "This policy will identify the Azure app service which dont have http logging enabled and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_9",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-008",
                            "eval": "data.rule.app_service_detaild_error_message_enabled",
                            "message": "data.rule.app_service_detaild_error_message_enabled_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, set 'detailed_error_messages_enabled = true' under 'logs' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#detailed_error_messages_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_008.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure App Service detaild error message should be enabled",
                    "description": "This policy will identify the Azure app service which dont have detaild error message enabled and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_10",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-009",
                            "eval": "data.rule.app_service_failed_request_tracing_enabled",
                            "message": "data.rule.app_service_failed_request_tracing_enabled_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, set 'app_service_failed_request_tracing_enabled = true' under 'logs' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#failed_request_tracing_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_009.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure App Service Failed request tracing should be enabled",
                    "description": "This policy will identify the Azure app service which dont have Failed request tracing enabled and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_11",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-010",
                            "eval": "data.rule.app_service_managed_identity_provider_enabled",
                            "message": "data.rule.app_service_managed_identity_provider_enabled_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, make sure property 'type' exist under 'identity' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#identity' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_010.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure App Service Managed Identity provider should be enabled",
                    "description": "This policy will identify the Azure app service which dont have Managed Identity provider enabled and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_12",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-011",
                            "eval": "data.rule.app_service_remote_debugging_disabled",
                            "message": "data.rule.app_service_remote_debugging_disabled_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, make sure property 'remote_debugging_enabled' does not exist under 'site_config' block or if exist set the value to 'false' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#remote_debugging_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_011.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure App Service remote debugging should be disabled",
                    "description": "This policy will identify the Azure app service which have remote debugging enabled and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_13",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-012",
                            "eval": "data.rule.app_service_ftp_deployment_disabled",
                            "message": "data.rule.app_service_ftp_deployment_disabled_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, make sure property 'ftps_state' has value either 'Disabled' or 'FtpsOnly' under 'site_config' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#ftps_state' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_012.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure App Service FTP deployments should be disabled",
                    "description": "This policy will identify the Azure app service which have FTP deployment enabled and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_14",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-013",
                            "eval": "data.rule.app_service_dot_net_framework_latest",
                            "message": "data.rule.app_service_dot_net_framework_latest_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, set dotnet_framework_version = 'v6.0' under 'site_config' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#dotnet_framework_version' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_013.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure App Service Dot Net Framework should be latest",
                    "description": "This policy will identify the Azure app service which dont have latest version of Dot Net Framework and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_15",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-014",
                            "eval": "data.rule.app_service_php_version_latest",
                            "message": "data.rule.app_service_php_version_latest_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, set php_version = '7.4' under 'site_config' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#php_version' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_014.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure App Service PHP version should be latest",
                    "description": "This policy will identify the Azure app service which dont have latest version of PHP and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_16",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-015",
                            "eval": "data.rule.app_service_python_version_latest",
                            "message": "data.rule.app_service_python_version_latest_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, set python_version = '3.9' under 'site_config' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#python_version' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_015.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure App Service Pyhton version should be latest",
                    "description": "This policy will identify the Azure app service which dont have latest version of Pyhton and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_17",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-016",
                            "eval": "data.rule.app_service_java_version_latest",
                            "message": "data.rule.app_service_java_version_latest_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, set java_version = '11' under 'site_config' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#java_version' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_016.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure App Service Java version should be latest",
                    "description": "This policy will identify the Azure app service which dont have latest version of Java and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_APP_SERVICE_18",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(appservice.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-WEB-017",
                            "eval": "data.rule.app_service_storage_account_type_azurefile",
                            "message": "data.rule.app_service_storage_account_type_azurefile_err",
                            "remediationDescription": "In 'azurerm_app_service' resource, set type = 'AzureFiles' under 'storage_account' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#storage_account' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_WEB_017.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure App Service storage account type should be AzureFiles",
                    "description": "This policy will identify the Azure app service which dont have storage account type AzureFiles and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_app_service"
                    ]
                },
                {
                    "masterTestId": "TEST_DATABASEACCOUNTS",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(databaseaccounts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-CDA-001",
                            "eval": "data.rule.tagsLength",
                            "message": "data.rule.tagsLength_err",
                            "remediationDescription": "In 'azurerm_cosmosdb_account' resource, add relevent tag on property 'tags' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/cosmosdb_account#tags' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_CDA_001.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure that Cosmos DB Account has an associated tag",
                    "description": "Tags are key-value pairs that you attach to resources to better organize them. They are particularly useful when you have many resources of the same type. By using tags, customers with hundreds of cloud resources, can easily access and analyze a specific set by filtering on those that contain the same tag. Some of the key advantages of tagging is Grouping, Filtering and Cost allocation.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_cosmosdb_account"
                    ]
                },
                {
                    "masterTestId": "TEST_DATABRICKS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(databricks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-DBK-001",
                            "eval": "data.rule.databrics_workspace_has_public_ip_disabled",
                            "message": "data.rule.databrics_workspace_has_public_ip_disabled_err",
                            "remediationDescription": "In 'azurerm_databricks_workspace' resource, set true as the value of 'no_public_ip' under 'custom_parameters' block to fix the issue. If 'custom_parameters' block does not exist please add one. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/databricks_workspace' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_DBK_001.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Databricks shoud not use public IP address",
                    "description": "Azure Databricks is a data analytics platform optimized for the Microsoft Azure cloud services platform. This policy will identify Databricks which does not have public ip disabled and warn.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_databricks_workspace"
                    ]
                },
                {
                    "masterTestId": "TEST_DATABRICKS_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(databricks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-DBK-002",
                            "eval": "data.rule.databrics_workspace_has_vnet_integration",
                            "message": "data.rule.databrics_workspace_has_vnet_integration_err",
                            "remediationDescription": "In 'azurerm_databricks_workspace' resource, set set vnet id as the value of 'virtual_network_id' under 'custom_parameters' block to fix the issue. If 'custom_parameters' block does not exist please add one. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/databricks_workspace' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_DBK_002.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure Databricks should have vnet integration",
                    "description": "Azure Databricks is a data analytics platform optimized for the Microsoft Azure cloud services platform. This policy will identify Databricks which does not have vnet integration and warn.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_databricks_workspace"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_ADMINISTRATORS",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbadministrators.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-001",
                            "eval": "data.rule.db_ad_admin",
                            "message": "data.rule.db_ad_admin_err",
                            "remediationDescription": "In 'azurerm_sql_active_directory_administrator' resource, set the 'server_name' from associated 'azurerm_sql_server' resource's 'name' property to fix the issue. more simply make sure 'server_name' of 'azurerm_sql_active_directory_administrator' resource matches with 'name' of associated 'azurerm_sql_server' resource. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/sql_active_directory_administrator#server_name' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_001.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "SQL servers should be integrated with Azure Active Directory for administration",
                    "description": "Checks to ensure that SQL servers are configured with Active Directory admin authentication. Azure Active Directory authentication is a mechanism of connecting to Microsoft Azure SQL Database and SQL Data Warehouse by using identities in Azure Active Directory (Azure AD). With Azure AD authentication, you can centrally manage the identities of database users and other Microsoft services in one central location.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_sql_server"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_AUDITING_SETTINGS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbauditingsettings.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-004",
                            "eval": "data.rule.mssql_db_log_audit",
                            "message": "data.rule.mssql_db_log_audit_err",
                            "remediationDescription": "In 'azurerm_mssql_database_extended_auditing_policy' resource, set the 'database_id' from associated 'azurerm_mssql_database' resource's terraform deployment output to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_database_extended_auditing_policy#database_id' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_004.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Auditing for SQL database should be enabled",
                    "description": "Database events are tracked by the Auditing feature and the events are written to an audit log in your Azure storage account. This process helps you to monitor database activity, and get insight into anomalies that could indicate business concerns or suspected security violations.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HIPAA",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_database",
                        "azurerm_mssql_database_extended_auditing_policy"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_AUDITING_SETTINGS_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbauditingsettings.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-005",
                            "eval": "data.rule.mssql_db_log_retention",
                            "message": "data.rule.mssql_db_log_retention_err",
                            "remediationDescription": "In 'azurerm_mssql_database_extended_auditing_policy' resource, set the 'retention_in_days = 90' to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_database_extended_auditing_policy#retention_in_days' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_005.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure Azure SQL Database Auditing Retention is minimum 90 days or more",
                    "description": "This policy identifies SQL Databases which have Auditing Retention less than 90 days. Audit Logs can be used to check for anomalies and gives insight into suspected breaches or misuse of information and access. It is recommended to configure SQL database Audit Retention to be greater than or equal to 90 days.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HIPAA",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_database",
                        "azurerm_mssql_database_extended_auditing_policy"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_FIREWALL_RULES",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbfirewallrules.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-011",
                            "eval": "data.rule.db_firewall",
                            "message": "data.rule.db_firewall_err",
                            "remediationDescription": "In 'azurerm_sql_firewall_rule' resource, set valid ip range other then '0.0.0.0' between 'start_ip_address' and 'end_ip_address' to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/sql_firewall_rule' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_011.py"
                        }
                    ],
                    "severity": "High",
                    "title": "SQL Server Firewall rules should not configure to allow full inbound access to everyone",
                    "description": "Firewalls grant access to databases based on the originating IP address of each request and should be within the range of START IP and END IP. Firewall settings with START IP and END IP both with \"0.0.0.0\" represents access to all Azure internal network. This setting needs to be turned-off to remove blanket access.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_sql_firewall_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_SECURITY_ALERTS_POLICIES_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbsecurityalertpolicies.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-017",
                            "eval": "data.rule.dbsec_threat_off",
                            "message": "data.rule.dbsec_threat_off_err",
                            "remediationDescription": "In 'azurerm_mssql_server_security_alert_policy' resource, set state = 'Enabled' to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server_security_alert_policy#state' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_017.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "SQL Database Server should have security alert policies enabled",
                    "description": "SQL Threat Detection provides a new layer of security, which enables customers to detect and respond to potential threats as they occur by providing security alerts on anomalous activities. Users will receive an alert upon suspicious database activities, potential vulnerabilities, and SQL injection attacks, as well as anomalous database access patterns. SQL Threat Detection alerts provide details of suspicious activity and recommend action on how to investigate and mitigate the threat.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server_security_alert_policy"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_SECURITY_ALERTS_POLICIES_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbsecurityalertpolicies.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-018",
                            "eval": "data.rule.dbsec_threat_retention",
                            "message": "data.rule.dbsec_threat_retention_err",
                            "remediationDescription": "In 'azurerm_mssql_server_security_alert_policy' resource, set 'retention_days = 91' to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server_security_alert_policy#retention_days' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_018.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure SQL Database Server security alert policies thread retention should be configured for more than 90 days",
                    "description": "This policy identifies SQL Databases which have Threat Retention less than or equals to 90 days. Threat Logs can be used to check for anomalies and gives an understanding of suspected breaches or misuse of data and access. It is recommended to configure SQL database Threat Retention to be greater than 90 days.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HIPAA",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server_security_alert_policy"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_SECURITY_ALERTS_POLICIES_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbsecurityalertpolicies.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-019",
                            "eval": "data.rule.dbsec_threat_email",
                            "message": "data.rule.dbsec_threat_email_err",
                            "remediationDescription": "In 'azurerm_mssql_server_security_alert_policy' resource, add some email address who need to get notified about potential thread detection under 'email_addresses' array to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server_security_alert_policy#email_addresses' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_019.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure SQL Database Server Security Alert Policy should be configured to send alert to the configured email addresses",
                    "description": "Checks to ensure that an valid email address is set for Threat Detection alerts. The alerts are sent to this email address when any anomalous activities are detected on SQL databases.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HIPAA",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server_security_alert_policy"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_SECURITY_ALERTS_POLICIES_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbsecurityalertpolicies.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-020",
                            "eval": "data.rule.dbsec_threat_alert",
                            "message": "data.rule.dbsec_threat_alert_err",
                            "remediationDescription": "In 'azurerm_mssql_server_security_alert_policy' resource, remove 'disabled_alerts' property or remove all the alerts element out of it to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server_security_alert_policy#disabled_alerts' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_020.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure SQL Server threat detection alerts should be enabled for all threat types",
                    "description": "Advanced data security (ADS) provides a set of advanced SQL security capabilities, including vulnerability assessment, threat detection, and data discovery and classification.<br><br>This policy identifies Azure SQL servers that have disabled the detection of one or more threat types. To protect your SQL Servers, as a best practice, enable ADS detection for all types of threats.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HIPAA",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server_security_alert_policy"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_SECURITY_ALERTS_POLICIES_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbsecurityalertpolicies.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-021",
                            "eval": "data.rule.sql_alert",
                            "message": "data.rule.sql_alert_err",
                            "remediationDescription": "In 'azurerm_mssql_server_security_alert_policy' resource, set 'email_account_admins = true' to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server_security_alert_policy#email_account_admins' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_021.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Threat Detection alert should be configured to sent notification to the sql server account administrators",
                    "description": "Ensure that threat detection alert is configured to sent notification to the sql server account administrators",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server_security_alert_policy"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_SERVER_AUDITING_SETTINGS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbserverauditingsettings.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-052",
                            "eval": "data.rule.mssql_log_retention",
                            "message": "data.rule.mssql_log_retention_err",
                            "remediationDescription": "In 'azurerm_mssql_server_extended_auditing_policy' resource, set the 'retention_in_days = 91' to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server_extended_auditing_policy#retention_in_days' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_052.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure MSSQL Server audit log retention should be greater then 90 days",
                    "description": "Audit Logs can help you find suspicious events, unusual activity, and trends. Auditing the SQL server, at the server-level, allows you to track all existing and newly created databases on the instance.<br><br>This policy identifies SQL servers which do not retain audit logs for more than 90 days. As a best practice, configure the audit logs retention time period to be greater than 90 days.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server_extended_auditing_policy",
                        "azurerm_mssql_server",
                        "azurerm_sql_server"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_SERVER_AUDITING_SETTINGS_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbserverauditingsettings.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-053",
                            "eval": "data.rule.sql_log_retention",
                            "message": "data.rule.sql_log_retention_err",
                            "remediationDescription": "In 'azurerm_sql_server' resource, set the 'retention_in_days = 91' under 'extended_auditing_policy' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/sql_server#retention_in_days' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_053.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure SQL Server audit log retention should be greater then 90 days",
                    "description": "Audit Logs can help you find suspicious events, unusual activity, and trends. Auditing the SQL server, at the server-level, allows you to track all existing and newly created databases on the instance.<br><br>This policy identifies SQL servers which do not retain audit logs for more than 90 days. As a best practice, configure the audit logs retention time period to be greater than 90 days.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server_extended_auditing_policy",
                        "azurerm_mssql_server",
                        "azurerm_sql_server"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_SERVER_AUDITING_SETTINGS_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbserverauditingsettings.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-054",
                            "eval": "data.rule.mssql_auditing_enabled",
                            "message": "data.rule.mssql_auditing_enabled_err",
                            "remediationDescription": "In 'azurerm_mssql_server' resource, make sure 'extended_auditing_policy' block exist to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server#extended_auditing_policy' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_054.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure MSSQL Server audit log should be enabled",
                    "description": "Audit Logs can help you find suspicious events, unusual activity, and trends. Auditing the SQL server, at the server-level, allows you to track all existing and newly created databases on the instance.<br><br>This policy identifies SQL servers which do not have audit log enabled.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server_extended_auditing_policy",
                        "azurerm_mssql_server",
                        "azurerm_sql_server"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_SERVER_AUDITING_SETTINGS_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbserverauditingsettings.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-055",
                            "eval": "data.rule.sql_auditing_enabled",
                            "message": "data.rule.sql_auditing_enabled_err",
                            "remediationDescription": "In 'azurerm_sql_server' resource, make sure 'extended_auditing_policy' block exist to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/sql_server#extended_auditing_policy' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_055.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure SQL Server audit log should be enabled",
                    "description": "Audit Logs can help you find suspicious events, unusual activity, and trends. Auditing the SQL server, at the server-level, allows you to track all existing and newly created databases on the instance.<br><br>This policy identifies SQL servers which do not have audit log enabled.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server_extended_auditing_policy",
                        "azurerm_mssql_server",
                        "azurerm_sql_server"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_VALENRABILITY_ASSESSMENTS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbvulnerabilityassessments.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-024",
                            "eval": "data.rule.db_ads_mail",
                            "message": "data.rule.db_ads_mail_err",
                            "remediationDescription": "In 'azurerm_mssql_server_vulnerability_assessment' resource, specify recipient email addresses into 'emails' array under 'recurring_scans' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server_vulnerability_assessment#emails' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_024.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure SQL Server advanced data security should have email alert recipient to get scan notification",
                    "description": "Advanced data security (ADS) provides a set of advanced SQL security capabilities, including vulnerability assessment, threat detection, and data discovery and classification.<br><br>This policy identifies Azure SQL Servers that do not have an email address configured for ADS alert notifications. As a best practice, provide one or more email addresses where you want to receive alerts for any anomalous activities detected on SQL Servers.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server_vulnerability_assessment"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_VALENRABILITY_ASSESSMENTS_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbvulnerabilityassessments.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-026",
                            "eval": "data.rule.db_ads_alert",
                            "message": "data.rule.db_ads_alert_err",
                            "remediationDescription": "In 'azurerm_mssql_server_vulnerability_assessment' resource, set 'email_subscription_admins = true' under 'recurring_scans' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server_vulnerability_assessment#email_subscription_admins' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_026.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure SQL Server advanced data security should send alerts to subscription administrators",
                    "description": "Advanced data security (ADS) provides a set of advanced SQL security capabilities, including vulnerability assessment, threat detection, and data discovery and classification.<br><br>This policy identifies Azure SQL Servers that are not enabled with ADS. As a best practice, enable ADS so that the administrators service and co-administrator can receive email alerts when anomalous activities are detected on the SQL Servers.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server_vulnerability_assessment"
                    ]
                },
                {
                    "masterTestId": "TEST_DB_VALENRABILITY_ASSESSMENTS_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dbvulnerabilityassessments.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-022",
                            "eval": "data.rule.db_ads_scan",
                            "message": "data.rule.db_ads_scan_err",
                            "remediationDescription": "In 'azurerm_mssql_server_vulnerability_assessment' resource, set 'enabled = true' under 'recurring_scans' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server_vulnerability_assessment#enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_022.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure SQL Server advanced data security should be enabled",
                    "description": "Advanced data security (ADS) provides a set of advanced SQL security capabilities, including vulnerability assessment, threat detection, and data discovery and classification.<br><br>This policy identifies Azure SQL servers that do not have ADS enabled. As a best practice, enable ADS on mission-critical SQL servers.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server_vulnerability_assessment"
                    ]
                },
                {
                    "masterTestId": "TEST_DIAGONASTIC_SETTINGS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(diagnosticsettings.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-MNT-002",
                            "eval": "data.rule.log_keyvault",
                            "message": "data.rule.log_keyvault_err",
                            "remediationDescription": "Make sure resource 'azurerm_key_vault' and 'azurerm_monitor_diagnostic_setting' both exist and in 'azurerm_monitor_diagnostic_setting' resource, set 'enabled = true' and category = 'auditevent' under 'log' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/monitor_diagnostic_setting#log' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_MNT_002.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Key Vault audit logging should be enabled",
                    "description": "This policy identifies Azure Key Vault instances for which audit logging is disabled. As a best practice, enable audit event logging for Key Vault instances to monitor how and when your key vaults are accessed, and by whom.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_storage_queue",
                        "azurerm_monitor_diagnostic_setting",
                        "azurerm_lb",
                        "azurerm_storage_table",
                        "azurerm_storage_blob",
                        "azurerm_storage_account",
                        "azurerm_key_vault"
                    ]
                },
                {
                    "masterTestId": "TEST_DIAGONASTIC_SETTINGS_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(diagnosticsettings.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-MNT-003",
                            "eval": "data.rule.log_lbs",
                            "message": "data.rule.log_lbs_err",
                            "remediationDescription": "Make sure 'azurerm_lb' and 'azurerm_monitor_diagnostic_setting' both exist and in 'azurerm_monitor_diagnostic_setting' resource, set 'enabled = true' and category = 'auditevent' under 'log' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/monitor_diagnostic_setting#log' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_MNT_003.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure Load Balancer diagnostics logs should be enabled",
                    "description": "Azure Load Balancers provide different types of logs alert events, health probe, metrics to help you manage and troubleshoot issues. This policy identifies Azure Load Balancers that have diagnostics logs disabled. As a best practice, enable diagnostic logs to start collecting the data available through these logs.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_storage_queue",
                        "azurerm_monitor_diagnostic_setting",
                        "azurerm_lb",
                        "azurerm_storage_table",
                        "azurerm_storage_blob",
                        "azurerm_storage_account",
                        "azurerm_key_vault"
                    ]
                },
                {
                    "masterTestId": "TEST_DIAGONASTIC_SETTINGS_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(diagnosticsettings.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-MNT-004",
                            "eval": "data.rule.log_storage_retention",
                            "message": "data.rule.log_storage_retention_err",
                            "remediationDescription": "In 'azurerm_monitor_diagnostic_setting' resource, set 'enabled = true', category = 'auditevent', 'retention_policy.enabled = true' and 'retention_policy.days = 90' under 'log' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/monitor_diagnostic_setting#log' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_MNT_004.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure Storage Account auditing retention should be 90 days or more",
                    "description": "This policy identifies Storage Accounts which have Auditing Retentions less than 90 days. Audit Logs can be used to check for anomalies and gives insight into suspected breaches or misuse of information and access. It is recommended to configure Storage Account Audit Log Retention to be greater than or equal to 90 days.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_storage_queue",
                        "azurerm_monitor_diagnostic_setting",
                        "azurerm_lb",
                        "azurerm_storage_table",
                        "azurerm_storage_blob",
                        "azurerm_storage_account",
                        "azurerm_key_vault"
                    ]
                },
                {
                    "masterTestId": "TEST_DIAGONASTIC_SETTINGS_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(diagnosticsettings.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-MNT-005",
                            "eval": "data.rule.log_blob",
                            "message": "data.rule.log_blob_err",
                            "remediationDescription": "In 'azurerm_monitor_diagnostic_setting' resource, set 'enabled = true' and category = 'auditevent' under 'log' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/monitor_diagnostic_setting#log' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_MNT_005.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure storage account blob services diagnostic logs should be enabled",
                    "description": "Storage Logging records details of requests (read, write, and delete operations) against your Azure blobs. The logs include additional information such as:<br>- Timing and server latency.<br>- Success or failure, and HTTP status code.<br>- Authentication details<br><br>This policy identifies Azure storage accounts that do not have logging enabled for blobs. As a best practice, enable logging for read, write, and delete request types on blobs.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_storage_queue",
                        "azurerm_monitor_diagnostic_setting",
                        "azurerm_lb",
                        "azurerm_storage_table",
                        "azurerm_storage_blob",
                        "azurerm_storage_account",
                        "azurerm_key_vault"
                    ]
                },
                {
                    "masterTestId": "TEST_DIAGONASTIC_SETTINGS_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(diagnosticsettings.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-MNT-006",
                            "eval": "data.rule.log_queue",
                            "message": "data.rule.log_queue_err",
                            "remediationDescription": "In 'azurerm_monitor_diagnostic_setting' resource, set 'enabled = true' and category = 'auditevent' under 'log' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/monitor_diagnostic_setting#log' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_MNT_006.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure storage account queue services diagnostic logs should be enabled",
                    "description": "Queue logging cannot be enabled for Storage Accounts with 'kind' of BlobStorage **<br><br>Storage Logging records details of requests (read, write, and delete operations) against your Azure queues. The logs include additional information such as:<br>- Timing and server latency.<br>- Success or failure, and HTTP status code.<br>- Authentication details<br><br>This policy identifies Azure storage accounts that do not have logging enabled for queues. As a best practice, enable logging for read, write, and delete request types on queues.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_storage_queue",
                        "azurerm_monitor_diagnostic_setting",
                        "azurerm_lb",
                        "azurerm_storage_table",
                        "azurerm_storage_blob",
                        "azurerm_storage_account",
                        "azurerm_key_vault"
                    ]
                },
                {
                    "masterTestId": "TEST_DIAGONASTIC_SETTINGS_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(diagnosticsettings.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-MNT-007",
                            "eval": "data.rule.log_table",
                            "message": "data.rule.log_table_err",
                            "remediationDescription": "In 'azurerm_monitor_diagnostic_setting' resource, set 'enabled = true' and category = 'auditevent' under 'log' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/monitor_diagnostic_setting#log' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_MNT_007.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure storage account table services diagnostic logs should be enabled",
                    "description": "Storage Logging records details of requests (read, write, and delete operations) against your Azure queues. The logs include additional information such as:<br>- Timing and server latency.<br>- Success or failure, and HTTP status code.<br>- Authentication details<br><br>This policy identifies Azure storage accounts that do not have logging enabled for tables. As a best practice, enable logging for read, write, and delete request types on tables.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_storage_queue",
                        "azurerm_monitor_diagnostic_setting",
                        "azurerm_lb",
                        "azurerm_storage_table",
                        "azurerm_storage_blob",
                        "azurerm_storage_account",
                        "azurerm_key_vault"
                    ]
                },
                {
                    "masterTestId": "TEST_DISKS",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(disks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-DSK-001",
                            "eval": "data.rule.disk_encrypt",
                            "message": "data.rule.disk_encrypt_err",
                            "remediationDescription": "In 'azurerm_managed_disk' resource, set 'enabled = true' under 'encryption_settings' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/managed_disk#enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_DSK_001.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure disk should have Azure Disk Encryption (ADE) enabled",
                    "description": "To meet your organizational security or compliance requirement, Azure provides disk encryption at rest using Azure Storage Service Encryption (SSE) and Azure Disk Encryption (ADE). Starting February 2017, SSE is enabled by default for all managed disks. ADE is integrated with Azure Key Vault to help you control, manage, and audit the disk encryption keys and secrets.<br><br>This policy detects Virtual Machine (VM) OS disks that are not encrypted at rest using ADE. As a best practice, enable ADE for provide volume encryption for the OS disk. For more information, see https://docs.microsoft.com/en-us/azure/security/azure-security-disk-encryption-overview.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_managed_disk"
                    ]
                },
                {
                    "masterTestId": "TEST_FUNCTION_APP",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(functionapp.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AFA-001",
                            "eval": "data.rule.functionapp_authentication_enabled",
                            "message": "data.rule.functionapp_authentication_enabled_err",
                            "remediationDescription": "In 'azurerm_function_app' resource, set 'enabled = true' under 'auth_settings' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/function_app#enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AFA_001.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure Function apps Authentication should be enabled",
                    "description": "Azure Function app provides built-in authentication and authorization capabilities (sometimes referred to as 'Easy Auth'), so you can sign in users and access data by writing minimal or no code in your web app, RESTful API, and mobile back end, and also Azure Functions",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_function_app"
                    ]
                },
                {
                    "masterTestId": "TEST_KeyVault_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(KeyVault.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-KV-001",
                            "eval": "data.rule.KeyVault",
                            "message": "data.rule.KeyVault_err",
                            "remediationDescription": "In 'azurerm_key_vault' resource, make sure you have added either 'key_permissions' or 'secret_permissions' or 'certificate_permissions' or 'storage_permissions' under access_policy block to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#access_policy' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_KV_001.py"
                        }
                    ],
                    "severity": "Low",
                    "title": "Ensure at least one principal has access to Keyvault",
                    "description": "Use the Azure Key Vault to store secrets within the Microsoft Azure environment. Secrets in Azure Key Vault are octet sequences with a maximum size of 25k bytes each.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices",
                                "HIPAA",
                                "NIST CSF"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_key_vault"
                    ]
                },
                {
                    "masterTestId": "TEST_KeyVault_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(KeyVault.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-KV-003",
                            "eval": "data.rule.enablePurgeProtection",
                            "message": "data.rule.enablePurgeProtection_err",
                            "remediationDescription": "In 'azurerm_key_vault' resource, set 'purge_protection_enabled = true' to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#purge_protection_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_KV_003.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Key vault should have purge protection enabled",
                    "description": "The key vault contains object keys, secrets and certificates. Accidental unavailability of a key vault can cause immediate data loss or loss of security functions (authentication, validation, verification, non-repudiation",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices "
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_key_vault"
                    ]
                },
                {
                    "masterTestId": "TEST_KeyVault_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(KeyVault.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-KV-002",
                            "eval": "data.rule.enableSoftDelete",
                            "message": "data.rule.enableSoftDelete_err",
                            "remediationDescription": "In 'azurerm_key_vault' resource, set 'soft_delete_enabled = true' to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#purge_protection_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_KV_002.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure the key vault is recoverable - enable 'Soft Delete' setting for a Key Vault",
                    "description": "The key vault contains object keys, secrets and certificates. Accidental unavailability of a key vault can cause immediate data loss or loss of security functions (authentication, validation, verification, non-repudiation, etc.) supported by the key vault objects. It is recommended the key vault be made recoverable by enabling the 'Do Not Purge' and 'Soft Delete' functions. This is in order to prevent loss of encrypted data including storage accounts, SQL databases, and/or dependent services provided by key vault objects (Keys, Secrets, Certificates) etc., as may happen in the case of accidental deletion by a user or from disruptive activity by a malicious user.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices "
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_key_vault"
                    ]
                },
                {
                    "masterTestId": "TEST_KEYVAULT_KEYS",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(keyvaultkeys.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-KV-004",
                            "eval": "data.rule.kv_keys_expire",
                            "message": "data.rule.kv_keys_expire_err",
                            "remediationDescription": "In 'azurerm_key_vault_key' resource, set valid date other then null in property 'expiration_date' to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_key#expiration_date' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_KV_004.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Key Vault keys should have an expiration date",
                    "description": "This policy identifies Azure Key Vault secrets that do not have an expiry date. As a best practice, set an expiration date for each secret and rotate the secret regularly.<br><br>Before you activate this policy, ensure that you have added the <compliance-software> Service Principal to each Key Vault: https://docs.paloaltonetworks.com/<compliance-software>/<compliance-software>-admin/connect-your-cloud-platform-to-<compliance-software>/onboard-your-azure-account/set-up-your-azure-account.html<br><br>Alternatively, run the following command on the Azure cloud shell:<br>az keyvault list | jq '.[].name' | xargs -I {} az keyvault set-policy --name {} --certificate-permissions list listissuers --key-permissions list --secret-permissions list --spn <<compliance-software>_app_id>",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "PCI-DSS",
                                "GDPR",
                                "ISO 27001",
                                "NIST CSF",
                                "HIPAA",
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_key_vault_key"
                    ]
                },
                {
                    "masterTestId": "TEST_KEYVAULT_SECRETS",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(keyvaultsecrets.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-KV-005",
                            "eval": "data.rule.kv_expire",
                            "message": "data.rule.kv_expire_err",
                            "remediationDescription": "In 'azurerm_key_vault_secret' resource, set valid date other then null in property 'expiration_date' to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_secret#expiration_date' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_KV_005.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Key Vault secrets should have an expiration date",
                    "description": "This policy identifies Azure Key Vault secrets that do not have an expiry date. As a best practice, set an expiration date for each secret and rotate the secret regularly.<br><br>Before you activate this policy, ensure that you have added the <compliance-software> Service Principal to each Key Vault: https://docs.paloaltonetworks.com/<compliance-software>/<compliance-software>-admin/connect-your-cloud-platform-to-<compliance-software>/onboard-your-azure-account/set-up-your-azure-account.html<br><br>Alternatively, run the following command on the Azure cloud shell:<br>az keyvault list | jq '.[].name' | xargs -I {} az keyvault set-policy --name {} --certificate-permissions list listissuers --key-permissions list --secret-permissions list --spn <<compliance-software>_app_id>",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_key_vault_secret"
                    ]
                },
                {
                    "masterTestId": "TEST_LOCKS",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(locks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-AML-008",
                            "eval": "data.rule.rg_locks",
                            "message": "data.rule.rg_locks_err",
                            "remediationDescription": "In 'azurerm_management_lock' resource, set lock_level = 'CanNotDelete' and make sure 'scope' property has id of target deployment resource group as value to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/management_lock#lock_level' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_AML_008.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Deployment Scope Resource Group should have a remove protection resource lock configured",
                    "description": "Azure Resource Manager locks provide a way to lock down Azure resources from being deleted or modified. The lock level can be set to either 'CanNotDelete' or 'ReadOnly'. When you apply a lock at a parent scope, all resources within the scope inherit the same lock, and the most restrictive lock takes precedence.<br><br>This policy identifies Azure Resource Groups that do not have a lock set. As a best practice, place a lock on important resources to prevent accidental or malicious modification or deletion by unauthorized users.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_management_lock"
                    ]
                },
                {
                    "masterTestId": "TEST_MariaDB_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(mariadb.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-012",
                            "eval": "data.rule.maria_ingress_from_any_ip_disabled",
                            "message": "data.rule.maria_ingress_from_any_ip_disabled_err",
                            "remediationDescription": "Make sure resource 'azurerm_mariadb_server' and 'azurerm_mariadb_firewall_rule' both exist and in 'azurerm_mariadb_firewall_rule' resource, make sure 'start_ip_address' and 'end_ip_address' dont have port range configured to '0.0.0.0' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mariadb_firewall_rule#start_ip_address' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_012.py"
                        }
                    ],
                    "severity": "High",
                    "title": "MariaDB should not allow ingress from all Azure-internal IP addresses (0.0.0.0/0)",
                    "description": "This policy will identify MariaDB firewall rule that are currently allowing ingress from all Azure-internal IP addresses",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mariadb_firewall_rule",
                        "azurerm_mariadb_server"
                    ]
                },
                {
                    "masterTestId": "TEST_MariaDB_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(mariadb.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-056",
                            "eval": "data.rule.mairadb_ssl_enforcement_enabled",
                            "message": "data.rule.mairadb_ssl_enforcement_enabled_err",
                            "remediationDescription": "In 'azurerm_mariadb_server' resource, set 'ssl_enforcement_enabled = true' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mariadb_server#ssl_enforcement_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_056.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure ssl enforcement is enabled on MariaDB Server.",
                    "description": "Enable SSL connection on MariaDB Servers. Rationale: SSL connectivity helps to provide a new layer of security, by connecting database server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between database server and client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and application.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mariadb_firewall_rule",
                        "azurerm_mariadb_server"
                    ]
                },
                {
                    "masterTestId": "TEST_MariaDB_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(mariadb.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-057",
                            "eval": "data.rule.mairadb_public_access_disabled",
                            "message": "data.rule.mairadb_public_access_disabled_err",
                            "remediationDescription": "In 'azurerm_mariadb_server' resource, set 'public_network_access_enabled = false' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mariadb_server#public_network_access_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_057.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure MariaDB servers don't have public network access enabled",
                    "description": "Always use Private Endpoint for MariaDB Server",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mariadb_firewall_rule",
                        "azurerm_mariadb_server"
                    ]
                },
                {
                    "masterTestId": "TEST_MariaDB_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(mariadb.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-058",
                            "eval": "data.rule.mariadb_geo_redundant_backup_enabled",
                            "message": "data.rule.mariadb_geo_redundant_backup_enabled_err",
                            "remediationDescription": "In 'azurerm_mariadb_server' resource, set 'geo_redundant_backup_enabled = true' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mariadb_server#geo_redundant_backup_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_058.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure Geo-redundant backup is enabled on MariaDB server.",
                    "description": "Azure Database for MariaDB provides the flexibility to choose between locally redundant or geo-redundant backup storage in the General Purpose and Memory Optimized tiers. When the backups are stored in geo-redundant backup storage, they are not only stored within the region in which your server is hosted, but are also replicated to a paired data center. This provides better protection and ability to restore your server in a different region in the event of a disaster. The Basic tier only offers locally redundant backup storage.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mariadb_firewall_rule",
                        "azurerm_mariadb_server"
                    ]
                },
                {
                    "masterTestId": "TEST_MySQL_SERVER_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(mysql_server.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-059",
                            "eval": "data.rule.mysql_ingress_from_any_ip_disabled",
                            "message": "data.rule.mysql_ingress_from_any_ip_disabled_err",
                            "remediationDescription": "Make sure resource 'azurerm_mysql_server' and 'azurerm_mysql_firewall_rule' exist and in 'azurerm_mysql_firewall_rule' resource, make sure 'start_ip_address' and 'end_ip_address' dont have port range configured to '0.0.0.0' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mysql_firewall_rule#start_ip_address' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_059.py"
                        }
                    ],
                    "severity": "High",
                    "title": "MySQL Database Server should not allow ingress from all Azure-internal IP addresses (0.0.0.0/0)",
                    "description": "This policy will identify MySQL Database Server firewall rule that are currently allowing ingress from all Azure-internal IP addresses",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mysql_firewall_rule",
                        "azurerm_mysql_server"
                    ]
                },
                {
                    "masterTestId": "TEST_MySQL_SERVER_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(mysql_server.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-016",
                            "eval": "data.rule.mysql_server_ssl_enforcement_enabled",
                            "message": "data.rule.mysql_server_ssl_enforcement_enabled_err",
                            "remediationDescription": "In 'azurerm_mysql_server' resource, set 'ssl_enforcement_enabled = true' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mysql_server#ssl_enforcement_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_016.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure MySQL Database Server accepts only SSL connections",
                    "description": "This policy will identify MySQL Database Server which are not enforcing all the incoming connection over SSL and alert if found.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mysql_firewall_rule",
                        "azurerm_mysql_server"
                    ]
                },
                {
                    "masterTestId": "TEST_MySQL_SERVER_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(mysql_server.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-060",
                            "eval": "data.rule.mysql_public_access_disabled",
                            "message": "data.rule.mysql_public_access_disabled_err",
                            "remediationDescription": "In 'azurerm_mysql_server' resource, set 'public_network_access_enabled = false' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mysql_server#public_network_access_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_060.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure MySQL servers don't have public network access enabled",
                    "description": "Always use Private Endpoint for Azure MySQL Database Server",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mysql_firewall_rule",
                        "azurerm_mysql_server"
                    ]
                },
                {
                    "masterTestId": "TEST_MySQL_SERVER_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(mysql_server.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-061",
                            "eval": "data.rule.mysql_server_latest_tls_configured",
                            "message": "data.rule.mysql_server_latest_tls_configured_err",
                            "remediationDescription": "In 'azurerm_mysql_server' resource, set ssl_minimal_tls_version_enforced = 'TLS1_2' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mysql_server#ssl_minimal_tls_version_enforced' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_061.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure Azure MySQL Server has latest version of tls configured",
                    "description": "This policy will identify the Azure MySQL Server which dont have latest version of tls configured and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mysql_firewall_rule",
                        "azurerm_mysql_server"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_WATCHERS_FLOW_LOGS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(networkwatchersflowlogs.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NTW-001",
                            "eval": "data.rule.netwatchFlowlogs",
                            "message": "data.rule.netwatchFlowlogs_err",
                            "remediationDescription": "In 'azurerm_network_watcher_flow_log' resource, set 'enabled = true' to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/network_watcher_flow_log#enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_NTW_001.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure Network Watcher Network Security Group (NSG) flow logs should be enabled",
                    "description": "This policy identifies Azure Network Security Groups (NSG) for which flow logs are disabled. To perform this check, enable this action on the Azure Service Principal: 'Microsoft.Network/networkWatchers/queryFlowLogStatus/action'.<br><br>NSG flow logs, a feature of the Network Watcher app, enable you to view information about ingress and egress IP traffic through an NSG. The flow logs include information such as:<br>- Outbound and inbound flows on a per-rule basis.<br>- Network interface to which the flow applies.<br>- 5-tuple information about the flow (source/destination IP, source/destination port, protocol).<br>- Whether the traffic was allowed or denied.<br><br>As a best practice, enable NSG flow logs to improve network visibility.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_watcher_flow_log"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_WATCHERS_FLOW_LOGS_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(networkwatchersflowlogs.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NTW-002",
                            "eval": "data.rule.netwatch_logs",
                            "message": "data.rule.netwatch_logs_err",
                            "remediationDescription": "In 'azurerm_network_watcher_flow_log' resource, set 'enabled = true' under 'traffic_analytics' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/network_watcher_flow_log#enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_NTW_002.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure Network Watcher Network Security Group (NSG) traffic analytics should be enabled",
                    "description": "This policy identifies Azure Network Security Groups (NSG) for which flow logs are disabled. To perform this check, enable this action on the Azure Service Principal: 'Microsoft.Network/networkWatchers/queryFlowLogStatus/action'.<br><br>NSG flow logs, a feature of the Network Watcher app, enable you to view information about ingress and egress IP traffic through an NSG. The flow logs include information such as:<br>- Outbound and inbound flows on a per-rule basis.<br>- Network interface to which the flow applies.<br>- 5-tuple information about the flow (source/destination IP, source/destination port, protocol).<br>- Whether the traffic was allowed or denied.<br><br>As a best practice, enable NSG flow logs to improve network visibility.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_watcher_flow_log"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_WATCHERS_FLOW_LOGS_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(networkwatchersflowlogs.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NTW-003",
                            "eval": "data.rule.netwatch_log_retention",
                            "message": "data.rule.netwatch_log_retention_err",
                            "remediationDescription": "In 'azurerm_network_watcher_flow_log' resource, set 'enabled = true' and 'days = 91' under 'retention_policy' block to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/network_watcher_flow_log#enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_NTW_003.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Watcher Network Security Group (NSG) flow logs retention should be greater than 90 days",
                    "description": "This policy identifies Azure Network Security Groups (NSG) for which flow logs retention period is 90 days or less. To perform this check, enable this action on the Azure Service Principal: 'Microsoft.Network/networkWatchers/queryFlowLogStatus/action'.<br><br>NSG flow logs, a feature of the Network Watcher app, enable you to view information about ingress and egress IP traffic through an NSG. The flow logs include information such as:<br>- Outbound and inbound flows on a per-rule basis.<br>- Network interface to which the flow applies.<br>- 5-tuple information about the flow (source/destination IP, source/destination port, protocol).<br>- Whether the traffic was allowed or denied.<br><br>As a best practice, enable NSG flow logs and set the log retention period to at least 91 days.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_watcher_flow_log"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-001",
                            "eval": "data.rule.nsg_in_tcp_all_src",
                            "message": "data.rule.nsg_in_tcp_all_src_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_001.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group (NSG) having Inbound rule overly permissive to all TCP traffic from any source",
                    "description": "This policy identifies Azure Network Security Groups (NSGs) which are overly permissive to open TCP traffic from any source. A network security group contains a list of security rules that allow or deny inbound or outbound network traffic based on source or destination IP address, port, and protocol. As a best practice, it is recommended to configure NSGs to restrict traffic from known sources, allowing only authorized protocols and ports.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-002",
                            "eval": "data.rule.nsg_in_udp_all_src",
                            "message": "data.rule.nsg_in_udp_all_src_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_002.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group (NSG) having Inbound rule overly permissive to all UDP traffic from any source",
                    "description": "This policy identifies Azure Network Security Groups (NSGs) which are overly permissive to open UDP traffic from any source. A network security group contains a list of security rules that allow or deny inbound or outbound network traffic based on source or destination IP address, port, and protocol. As a best practice, it is recommended to configure NSGs to restrict traffic from known sources, allowing only authorized protocols and ports.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-003",
                            "eval": "data.rule.nsg_in_tcp_all",
                            "message": "data.rule.nsg_in_tcp_all_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_003.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group (NSG) having Inbound rule overly permissive to all traffic from Internet on TCP protocol",
                    "description": "This policy identifies Azure Network Security Groups (NSGs) which are overly permissive to all traffic from Internet on TCP protocol. A network security group contains a list of security rules that allow or deny inbound or outbound network traffic based on source or destination IP address, port, and protocol. As a best practice, it is recommended to configure NSGs to restrict traffic from known sources, allowing only authorized protocols and ports.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-004",
                            "eval": "data.rule.nsg_in_udp_all",
                            "message": "data.rule.nsg_in_udp_all_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_004.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group (NSG) having Inbound rule overly permissive to all traffic from Internet on UDP protocol",
                    "description": "This policy identifies Azure Network Security Groups (NSGs) which are overly permissive to all traffic from Internet on UDP protocol. A network security group contains a list of security rules that allow or deny inbound or outbound network traffic based on source or destination IP address, port, and protocol. As a best practice, it is recommended to configure NSGs to restrict traffic from known sources, allowing only authorized protocols and ports.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-005",
                            "eval": "data.rule.nsg_in_all",
                            "message": "data.rule.nsg_in_all_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_005.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group (NSG) having Inbound rule overly permissive to all traffic from Internet on any protocol",
                    "description": "This policy identifies Azure Network Security Groups (NSGs) which are overly permissive to all traffic from Internet on any protocol. A network security group contains a list of security rules that allow or deny inbound or outbound network traffic based on source or destination IP address, port, and protocol. As a best practice, it is recommended to configure NSGs to restrict traffic from known sources, allowing only authorized protocols and ports.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-006",
                            "eval": "data.rule.nsg_in_all_src",
                            "message": "data.rule.nsg_in_all_src_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_006.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group (NSG) having Inbound rule overly permissive to allow all traffic from any source on any protocol",
                    "description": "This policy identifies NSGs which allows incoming traffic from any source. A network security group contains a list of security rules that allow or deny inbound or outbound network traffic based on source or destination IP address, port, and protocol. As a best practice, it is recommended to configure NSGs to restrict traffic from known sources on authorized protocols and ports.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_7",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-007",
                            "eval": "data.rule.nsg_in_all_dst",
                            "message": "data.rule.nsg_in_all_dst_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_007.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group (NSG) having Inbound rule overly permissive to allow all traffic from any source to any destination (TJX)",
                    "description": "This policy identifies NSGs which allows incoming traffic from any source. A network security group contains a list of security rules that allow or deny inbound or outbound network traffic based on source or destination IP address, port, and protocol. As a best practice, it is recommended to configure NSGs to restrict traffic from known sources on authorized protocols and ports.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_8",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-008",
                            "eval": "data.rule.nsg_allow_icmp",
                            "message": "data.rule.nsg_allow_icmp_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_008.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group allows ICMP (Ping)",
                    "description": "ICMP is used by devices to communicate error messages and status. While ICMP is useful for  diagnostics and troubleshooting, it can also be used to exploit or disrupt systems.<br><br>This policy detects any NSG rule that allows ICMP (Ping) traffic from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict ICMP (Ping) solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_9",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-009",
                            "eval": "data.rule.inbound_port_21",
                            "message": "data.rule.inbound_port_21_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_009.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group allows FTP (TCP Port 21)",
                    "description": "This policy detects any NSG rule that allows FTP traffic on TCP port 21 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict FTP solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_10",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-010",
                            "eval": "data.rule.inbound_insecure_port",
                            "message": "data.rule.inbound_insecure_port_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_010.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Internet connectivity via tcp over insecure port",
                    "description": "Identify network traffic coming from internet which is plain text FTP, Telnet or HTTP from Internet.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "GDPR",
                                "HIPAA",
                                "NIST CSF",
                                "PCI-DSS",
                                "SOC 2"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_11",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "gID5",
                            "eval": "data.rule.inbound_port_11211",
                            "message": "data.rule.inbound_port_11211_err",
                            "remediationDescription": "",
                            "remediationFunction": "gID5.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Memcached DDoS attack attempted",
                    "description": "Memcached is a general-purpose distributed memory caching system. It is often used to speed up dynamic database-driven websites by caching data and objects in RAM to reduce the number of times an external data source (such as a database or API) must be read. It is reported that Memcache versions 1.5.5 and below are vulnerable to DDoS amplification attack. This policy aims at finding such attacks and generate alerts.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_12",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-012",
                            "eval": "data.rule.inbound_port_6379",
                            "message": "data.rule.inbound_port_6379_err",
                            "remediationDescription": "In 'azurerm_network_security_rule' resource, make sure property 'destination_port_range' dont have port '6379' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/network_security_rule#destination_port_range' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_NSG_012.py"
                        }
                    ],
                    "severity": "High",
                    "title": "RedisWannaMine vulnerable instances should not allow network traffic on port 6379",
                    "description": "RedisWannaMine is cryptojacking attack which aims at both database servers and application servers via remote code execution, exploiting an Apache Struts vulnerability. To inject cryptocurrency mining malware, RedWannaMine uses a transmission control protocol (TCP) scanner to check open port 445 of SMB and scans vulnerable Redis server database over port 6379(tcp), so that it can use EternalBlue to spread further.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_13",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-013",
                            "eval": "data.rule.inbound_port_dbs",
                            "message": "data.rule.inbound_port_dbs_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_013.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Publicly exposed DB Ports",
                    "description": "DB Servers contain sensitive data and should not be exposed to any direct traffic from internet. This policy checks for the network traffic from internet hitting the DB Servers on their default ports. The DB servers monitored on the default ports are : Microsoft SQL Server (1433), Oracle (1521), MySQL (3306), Sybase (5000), Postgresql (5432), CouchDB (5984), Redis (6379, 6380), RethinkDB (8080,28015, 29015), CassandraDB (9042), Memcached (11211), MongoDB (27017), DB2 (50000).",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_14",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-014",
                            "eval": "data.rule.inbound_port_22",
                            "message": "data.rule.inbound_port_22_err",
                            "remediationDescription": "In 'azurerm_network_security_rule' resource, make sure property 'destination_port_range' dont have port '22' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/network_security_rule#destination_port_range' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_NSG_014.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group should not allow SSH traffic from internet on port 22",
                    "description": "Blocking SSH port 22 will protect users from attacks like Account compromise.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HIPAA",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_15",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-015",
                            "eval": "data.rule.inbound_port_3389",
                            "message": "data.rule.inbound_port_3389_err",
                            "remediationDescription": "In 'azurerm_network_security_rule' resource, make sure property 'destination_port_range' dont have port '3389' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/network_security_rule#destination_port_range' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_NSG_015.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group (NSG) should not allows traffic from internet on port 3389",
                    "description": "Blocking RDP port 3389 will protect users from attacks like account compromise, Denial of service and ransomware.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HIPAA",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_16",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-016",
                            "eval": "data.rule.inbound_port_445",
                            "message": "data.rule.inbound_port_445_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_016.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group allows Windows SMB (TCP Port 445)",
                    "description": "This policy detects any NSG rule that allows Windows SMB traffic on TCP port 445 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict Windows SMB solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_17",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-018",
                            "eval": "data.rule.inbound_port_53",
                            "message": "data.rule.inbound_port_53_err",
                            "remediationDescription": "In 'azurerm_network_security_rule' resource, make sure property 'destination_port_range' dont have port '53' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/network_security_rule#destination_port_range' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_NSG_018.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group should not allows DNS (UDP Port 53)",
                    "description": "This policy detects any NSG rule that allows DNS traffic on UDP port 53 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict DNS solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_18",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-019",
                            "eval": "data.rule.inbound_port_20",
                            "message": "data.rule.inbound_port_20_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_019.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group allows FTP-Data (TCP Port 20)",
                    "description": "This policy detects any NSG rule that allows FTP-Data traffic on TCP port 20 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict FTP-Data solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_19",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-020",
                            "eval": "data.rule.inbound_port_4333",
                            "message": "data.rule.inbound_port_4333_err",
                            "remediationDescription": "In 'azurerm_network_security_rule' resource, make sure property 'destination_port_range' dont have port '4333' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/network_security_rule#destination_port_range' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_NSG_020.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group should not allow mSQL (TCP Port 4333)",
                    "description": "This policy detects any NSG rule that allows mSQL traffic on TCP port 4333 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict MSQL solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_20",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-021",
                            "eval": "data.rule.inbound_port_3306",
                            "message": "data.rule.inbound_port_3306_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_021.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group allows MySQL (TCP Port 3306)",
                    "description": "This policy detects any NSG rule that allows MySQL traffic on TCP port 3306 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict MySQL solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_21",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-022",
                            "eval": "data.rule.inbound_port_netbios",
                            "message": "data.rule.inbound_port_netbios_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_022.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group allows NetBIOS (UDP Port 138)",
                    "description": "This policy detects any NSG rule that allows NetBIOS traffic on UDP port 138 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict NetBIOS solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_22",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-023",
                            "eval": "data.rule.inbound_port_5432",
                            "message": "data.rule.inbound_port_5432_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_023.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group allows PostgreSQL (TCP Port 5432)",
                    "description": "This policy detects any NSG rule that allows PostgreSQL traffic on TCP port 5432 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict PostgreSQL solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_23",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-024",
                            "eval": "data.rule.inbound_port_25",
                            "message": "data.rule.inbound_port_25_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_024.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group allows SMTP (TCP Port 25)",
                    "description": "This policy detects any NSG rule that allows SMTP traffic on TCP port 25 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict SMTP solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_24",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-025",
                            "eval": "data.rule.inbound_port_sqlserver",
                            "message": "data.rule.inbound_port_sqlserver_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_025.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group allows SqlServer (TCP Port 1433)",
                    "description": "This policy detects any NSG rule that allows SqlServer traffic on TCP port 1433 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict SqlServer solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_25",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-026",
                            "eval": "data.rule.inbound_port_23",
                            "message": "data.rule.inbound_port_23_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_026.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group allows Telnet (TCP Port 23)",
                    "description": "Telnet provides a plaintext connection to manage devices using the command line, and is less secure than SSH.<br>This policy detects any NSG rule that allows Telnet traffic on TCP port 23 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict Telnet solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_26",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-027",
                            "eval": "data.rule.inbound_port_5500",
                            "message": "data.rule.inbound_port_5500_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_027.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group allows VNC Listener (TCP Port 5500)",
                    "description": "This policy detects any NSG rule that allows VNC Listener traffic on TCP port 5500 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict VNC Listener solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_27",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-028",
                            "eval": "data.rule.inbound_port_5900",
                            "message": "data.rule.inbound_port_5900_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_028.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group allows VNC Server (TCP Port 5900)",
                    "description": "This policy detects any NSG rule that allows VNC Server traffic on TCP port 5900 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict VNC Server solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_28",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-029",
                            "eval": "data.rule.inbound_port_135",
                            "message": "data.rule.inbound_port_135_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_029.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group allows Windows RPC (TCP Port 135)",
                    "description": "This policy detects any NSG rule that allows Windows RPC traffic on TCP port 135 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict Windows RPC solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_29",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-030",
                            "eval": "data.rule.nsg_out_all",
                            "message": "data.rule.nsg_out_all_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_030.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group with Outbound rule to allow all traffic to any source",
                    "description": "This policy identifies NSGs which allows outgoing traffic to any source. A network security group contains a list of security rules that allow or deny inbound or outbound network traffic based on source or destination IP address, port, and protocol. As a best practice, it is recommended to configure NSGs to restrict traffic to known sources on authorized protocols and ports.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_30",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-031",
                            "eval": "data.rule.outbound_port_bitcoin",
                            "message": "data.rule.outbound_port_bitcoin_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_031.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Instance is communicating with ports known to mine Bitcoin",
                    "description": "Identifies traffic from internal workloads to internet IPs on ports 8332,8333 that are known to mine Bitcoins. Unless this traffic is part of authorized applications and processes, your instances may have been compromised.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "HIPAA",
                                "NIST CSF"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_31",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-032",
                            "eval": "data.rule.outbound_port_ethereum",
                            "message": "data.rule.outbound_port_ethereum_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_NSG_032.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Instance is communicating with ports known to mine Ethereum",
                    "description": "Identifies traffic from internal workloads to internet IPs on ports 8545,30303 that are known to mine Ethereum. Unless this traffic is part of authorized applications and processes, your instances may have been compromised.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "HIPAA",
                                "NIST CSF"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_32",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-033",
                            "eval": "data.rule.inbound_port_137",
                            "message": "data.rule.inbound_port_137_err",
                            "remediationDescription": "In 'azurerm_network_security_rule' resource, make sure property 'destination_port_range' dont have port '137' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/network_security_rule#destination_port_range' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_NSG_033.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure Network Security Group should not allow NetBIOS (UDP Port 137)",
                    "description": "This policy detects any NSG rule that allows NetBIOS traffic on UDP port 137 from the internet. Review your list of NSG rules to ensure that your resources are not exposed.<br>As a best practice, restrict NetBIOS solely to known static IP addresses. Limit the access list to include known hosts, services, or specific employees only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_NETWORK_SECURITY_GROUP_33",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(nsg.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NSG-017",
                            "eval": "data.rule.inbound_insecure_omi_port",
                            "message": "data.rule.inbound_insecure_omi_port_err",
                            "remediationDescription": "In 'azurerm_network_security_rule' resource, make sure property 'destination_port_range' dont have port '5985', '5986' and '1270' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/network_security_rule#destination_port_range' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_NSG_017.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Network Security Group (NSG) should protect OMIGOD attack from internet",
                    "description": "Blocking OMI port 5985, 5986, 1270 will protect vnet/subnet/vms from OMIGOD attacks from internet.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_network_security_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_postgreSQL_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(postgreSQL.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-028",
                            "eval": "data.rule.geoRedundantBackup",
                            "message": "data.rule.geoRedundantBackup_err",
                            "remediationDescription": "In 'azurerm_postgresql_server' resource, set 'geo_redundant_backup_enabled = true' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/postgresql_server#geo_redundant_backup_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_028.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure Geo-redundant backup is enabled on PostgreSQL database server.",
                    "description": "Azure Database for PostgreSQL provides the flexibility to choose between locally redundant or geo-redundant backup storage in the General Purpose and Memory Optimized tiers. When the backups are stored in geo-redundant backup storage, they are not only stored within the region in which your server is hosted, but are also replicated to a paired data center. This provides better protection and ability to restore your server in a different region in the event of a disaster. The Basic tier only offers locally redundant backup storage.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_postgresql_configuration",
                        "azurerm_postgresql_server",
                        "azurerm_postgresql_firewall_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_postgreSQL_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(postgreSQL.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-029",
                            "eval": "data.rule.sslEnforcement",
                            "message": "data.rule.sslEnforcement_err",
                            "remediationDescription": "In 'azurerm_postgresql_server' resource, set 'ssl_enforcement_enabled = true' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/postgresql_server#ssl_enforcement_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_029.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure ssl enforcement is enabled on PostgreSQL Database Server.",
                    "description": "Enable SSL connection on PostgreSQL Servers. Rationale: SSL connectivity helps to provide a new layer of security, by connecting database server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between database server and client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and application.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_postgresql_configuration",
                        "azurerm_postgresql_server",
                        "azurerm_postgresql_firewall_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_postgreSQL_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(postgreSQL.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-062",
                            "eval": "data.rule.pg_ingress_from_any_ip_disabled",
                            "message": "data.rule.pg_ingress_from_any_ip_disabled_err",
                            "remediationDescription": "Make sure resource 'azurerm_postgresql_server' and 'azurerm_private_endpoint' or 'azurerm_postgresql_firewall_rule' exist and in 'azurerm_postgresql_firewall_rule' resource, make sure 'start_ip_address' and 'end_ip_address' dont have port range configured to '0.0.0.0' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/postgresql_firewall_rule#start_ip_address' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_062.py"
                        }
                    ],
                    "severity": "High",
                    "title": "PostgreSQL Database Server should not allow ingress from all Azure-internal IP addresses (0.0.0.0/0)",
                    "description": "This policy will identify PostgreSQL Database Server firewall rule that are currently allowing ingress from all Azure-internal IP addresses",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_postgresql_configuration",
                        "azurerm_postgresql_server",
                        "azurerm_postgresql_firewall_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_postgreSQL_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(postgreSQL.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-063",
                            "eval": "data.rule.azurerm_postgresql_configuration_log_checkpoints",
                            "message": "data.rule.azurerm_postgresql_configuration_log_checkpoints_err",
                            "remediationDescription": "In 'azurerm_postgresql_configuration' resource, set name = 'log_checkpoints' and value = 'on' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/postgresql_configuration' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_063.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "PostgreSQL Database Server should have log_checkpoints enabled",
                    "description": "A checkpoint is a point in the transaction log sequence at which all data files have been updated to reflect the information in the log. All data files will be flushed to disk. Refer to Section 29.4 for more details about what happens during a checkpoint. this policy will identify Postgresql DB Server which dont have checkpoint log enabled and alert.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_postgresql_configuration",
                        "azurerm_postgresql_server",
                        "azurerm_postgresql_firewall_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_postgreSQL_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(postgreSQL.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-064",
                            "eval": "data.rule.azurerm_postgresql_configuration_log_connections",
                            "message": "data.rule.azurerm_postgresql_configuration_log_connections_err",
                            "remediationDescription": "In 'azurerm_postgresql_configuration' resource, set name = 'log_connections' and value = 'on' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/postgresql_configuration' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_064.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "PostgreSQL Database Server should have log_connections enabled",
                    "description": "Causes each attempted connection to the server to be logged, as well as successful completion of client authentication. Only superusers can change this parameter at session start, and it cannot be changed at all within a session. this policy will identify Postgresql DB Server which dont have log_connections enabled and alert.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_postgresql_configuration",
                        "azurerm_postgresql_server",
                        "azurerm_postgresql_firewall_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_postgreSQL_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(postgreSQL.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-065",
                            "eval": "data.rule.azurerm_postgresql_configuration_connection_throttling",
                            "message": "data.rule.azurerm_postgresql_configuration_connection_throttling_err",
                            "remediationDescription": "In 'azurerm_postgresql_configuration' resource, set name = 'connection_throttling' and value = 'on' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/postgresql_configuration' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_065.py"
                        }
                    ],
                    "severity": "High",
                    "title": "PostgreSQL Database Server should have connection_throttling enabled",
                    "description": "Enabling connection_throttling allows the PostgreSQL Database to set the verbosity of logged messages which in turn generates query and error logs with respect to concurrent connections, that could lead to a successful Denial of Service (DoS) attack by exhausting connection resources.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_postgresql_configuration",
                        "azurerm_postgresql_server",
                        "azurerm_postgresql_firewall_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_postgreSQL_7",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(postgreSQL.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-066",
                            "eval": "data.rule.postgresql_public_access_disabled",
                            "message": "data.rule.postgresql_public_access_disabled_err",
                            "remediationDescription": "In 'azurerm_postgresql_server' resource, set 'public_network_access_enabled = false' or make sure resource 'azurerm_private_endpoint' exist to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/postgresql_server#public_network_access_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_066.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure PostgreSQL servers don't have public network access enabled",
                    "description": "Always use Private Endpoint for PostgreSQL Server",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_postgresql_configuration",
                        "azurerm_postgresql_server",
                        "azurerm_postgresql_firewall_rule"
                    ]
                },
                {
                    "masterTestId": "TEST_PRICING",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(pricing.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-ASC-001",
                            "eval": "data.rule.pricing",
                            "message": "data.rule.pricing_err",
                            "remediationDescription": "In 'azurerm_security_center_subscription_pricing' resource, set tier = 'standard' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/security_center_subscription_pricing#tier' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_ASC_001.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure Security Center should have pricing tier configured to 'standard'",
                    "description": "Selecting the standard pricing tier will enable threat detection for networks and virtual systems by providing threat intelligence, anomaly detection, and behavior analytics in Azure Security Center.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "ISO 27001"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_security_center_subscription_pricing"
                    ]
                },
                {
                    "masterTestId": "TEST_Redis",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(Redis.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-ARC-001",
                            "eval": "data.rule.enableSslPort",
                            "message": "data.rule.enableSslPort_err",
                            "remediationDescription": "In 'azurerm_redis_cache' resource, set 'enable_non_ssl_port = false' or remove 'enable_non_ssl_port' property to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/redis_cache#enable_non_ssl_port' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_ARC_001.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure that the Redis Cache accepts only SSL connections",
                    "description": "It is recommended that Redis Cache should allow only SSL connections. Note: some Redis tools (like redis-cli) do not support SSL. When using such tools plain connection ports should be enabled.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "PCI-DSS",
                                "GDPR",
                                "ISO 27001",
                                "NIST CSF",
                                "HIPAA",
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_redis_linked_server",
                        "azurerm_redis_cache"
                    ]
                },
                {
                    "masterTestId": "TEST_Redis_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(Redis.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-ARC-002",
                            "eval": "data.rule.serverRole",
                            "message": "data.rule.serverRole_err",
                            "remediationDescription": "In 'azurerm_redis_linked_server' resource, set server_role = 'Secondary' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/redis_linked_server#server_role' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_ARC_002.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Redis cache should have a backup",
                    "description": "Replicate Redis Cache server data to another Redis Cache server using geo replication. This feature is only available for Premium tier Redis Cache. From performance point of view, Microsoft recommends that both Redis Caches (Primary and the linked secondary) reside in the same region.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "PCI-DSS",
                                "ISO 27001",
                                "NIST CSF",
                                "HIPAA",
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_redis_linked_server",
                        "azurerm_redis_cache"
                    ]
                },
                {
                    "masterTestId": "TEST_REGISTRIES_LIST",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(registrieslist.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-ACR-003",
                            "eval": "data.rule.acr_classic",
                            "message": "data.rule.acr_classic_err",
                            "remediationDescription": "In 'azurerm_container_registry' resource, set the value to 'Basic'/'Standard'/'Premimu' other then 'classic' at property 'sku' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/container_registry#sku' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_ACR_003.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Container Registry should not use the deprecated classic registry",
                    "description": "This policy identifies an Azure Container Registry (ACR) that is using the classic SKU. The initial release of the Azure Container Registry (ACR) service that was offered as a classic SKU is being deprecated and will be unavailable after April 2019. As a best practice, upgrade your existing classic registry to a managed registry.<br><br>For more information, visit https://docs.microsoft.com/en-us/azure/container-registry/container-registry-upgrade",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_container_registry"
                    ]
                },
                {
                    "masterTestId": "TEST_REGISTRIES_WEBHOOK",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(registrieswebhooks.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-ACR-001",
                            "eval": "data.rule.acr_webhooks",
                            "message": "data.rule.acr_webhooks_err",
                            "remediationDescription": "In 'azurerm_container_registry_webhook' resource, set secure http (https) based wekhook url at 'service_uri' property to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/container_registry_webhook#service_uri' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_ACR_001.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure ACR should have HTTPS protocol enabled for webhook",
                    "description": "Ensure you send container registry webhooks only to a HTTPS endpoint. This policy checks your container registry webhooks and alerts if it finds a URI with HTTP.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_container_registry_webhook"
                    ]
                },
                {
                    "masterTestId": "TEST_REGISTRY",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(registry.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-ACR-002",
                            "eval": "data.rule.adminUserDisabled",
                            "message": "data.rule.adminUserDisabled_err",
                            "remediationDescription": "In 'azurerm_container_registry' resource, set 'admin_enabled = false' or remove 'admin_enabled' property to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/container_registry#admin_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_ACR_002.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure that admin user is disabled for Container Registry",
                    "description": "The value that indicates whether the admin user is enabled. Each container registry includes an admin user account, which is disabled by default. You can enable the admin user and manage its credentials in the Azure portal, or by using the Azure CLI or other Azure tools. All users authenticating with the admin account appear as a single user with push and pull access to the registry. Changing or disabling this account disables registry access for all users who use its credentials.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_container_registry"
                    ]
                },
                {
                    "masterTestId": "TEST_SECURITY_CONTACTS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitycontacts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-ASC-002",
                            "eval": "data.rule.securitycontacts",
                            "message": "data.rule.securitycontacts_err",
                            "remediationDescription": "In 'azurerm_security_center_contact' resource, set a valid email address at 'email' property to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/security_center_contact#email' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_ASC_002.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Security Center shoud have security contact email configured to get notifications",
                    "description": "Setting a valid email address in Security contact emails will enable Microsoft to contact you if the Microsoft Security Response Center (MSRC) discovers that your data has been accessed by an unlawful or unauthorized party. This will make sure that you are aware of any security issues and take prompt actions to mitigate the risks.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HIPAA",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_security_center_contact"
                    ]
                },
                {
                    "masterTestId": "TEST_SECURITY_CONTACTS_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitycontacts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-ASC-004",
                            "eval": "data.rule.securitycontacts_phone",
                            "message": "data.rule.securitycontacts_phone_err",
                            "remediationDescription": "In 'azurerm_security_center_contact' resource, set a valid phone number at 'phone' property to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/security_center_contact#phone' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_ASC_004.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Security Center shoud have security contact phone number configured to get notifications",
                    "description": "Setting a valid phone number in Security contact phone will enable Microsoft to contact you if the Microsoft Security Response Center (MSRC) discovers that your data has been accessed by an unlawful or unauthorized party. This will make sure that you are aware of any security issues and take prompt actions to mitigate the risks.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HIPAA",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_security_center_contact"
                    ]
                },
                {
                    "masterTestId": "TEST_SECURITY_CONTACTS_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitycontacts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-ASC-003",
                            "eval": "data.rule.securitycontacts_alert_notifications_enabled",
                            "message": "data.rule.securitycontacts_alert_notifications_enabled_err",
                            "remediationDescription": "In 'azurerm_security_center_contact' resource, set 'alert_notifications = true' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/security_center_contact#alert_notifications' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_ASC_003.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Security Center shoud send security alerts notifications to the security contact",
                    "description": "This policy will identify security centers which dont have configuration enabled to send security alerts notifications to the security contact and alert if missing.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HIPAA",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_security_center_contact"
                    ]
                },
                {
                    "masterTestId": "TEST_SECURITY_CONTACTS_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitycontacts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-ASC-005",
                            "eval": "data.rule.securitycontacts_alerts_to_admins_enabled",
                            "message": "data.rule.securitycontacts_alerts_to_admins_enabled_err",
                            "remediationDescription": "In 'azurerm_security_center_contact' resource, set 'alerts_to_admins = true' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/security_center_contact#alerts_to_admins' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_ASC_005.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Security Center shoud send security alerts notifications to subscription admins",
                    "description": "This policy will identify security centers which dont have configuration enabled to send security alerts notifications to subscription admins and alert if missing.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HIPAA",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_security_center_contact"
                    ]
                },
                {
                    "masterTestId": "TEST_SQL_SERVER_ALERT",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sql_alert_policy.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-031",
                            "eval": "data.rule.sql_server_alert",
                            "message": "data.rule.sql_server_alert_err",
                            "remediationDescription": "Make sure resource 'azurerm_mssql_server' and 'azurerm_mssql_server_security_alert_policy' both exist and in 'azurerm_mssql_server_security_alert_policy' resource, set state = 'Enabled' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server_security_alert_policy#state' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_031.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure Security Alert is enabled on Azure SQL Server",
                    "description": "Advanced data security should be enabled on your SQL servers.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server_security_alert_policy"
                    ]
                },
                {
                    "masterTestId": "TEST_SQL_SERVER_ENCRYPTION_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sql_servers_encryption.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-046",
                            "eval": "data.rule.serverKeyType",
                            "message": "data.rule.serverKeyType_err",
                            "remediationDescription": "Make sure resource 'azurerm_mssql_server' and 'azurerm_mssql_server_transparent_data_encryption' both exist and in 'azurerm_mssql_server_transparent_data_encryption' resource, make sure 'key_vault_key_id' property has id of associated 'azurerm_key_vault_key' resource to fix the issue. please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server_transparent_data_encryption#key_vault_key_id' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_046.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure SQL server's TDE protector is encrypted with Customer-managed key",
                    "description": "Customer-managed key support for Transparent Data Encryption (TDE) allows user control of TDE encryption keys and restricts who can access them and when. Azure Key Vault, Azure cloud-based external key management system is the first key management service where TDE has integrated support for Customer-managed keys. With Customer-managed key support, the database encryption key is protected by an asymmetric key stored in the Key Vault. The asymmetric key is set at the server level and inherited by all databases under that server.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HIPAA",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server",
                        "azurerm_mssql_server_transparent_data_encryption"
                    ]
                },
                {
                    "masterTestId": "TEST_MSSQL_SERVER_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sql_servers.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-047",
                            "eval": "data.rule.sql_public_access_disabled",
                            "message": "data.rule.sql_public_access_disabled_err",
                            "remediationDescription": "In 'azurerm_mssql_server' resource, set 'public_network_access_enabled = false' to fix the issue. If 'public_network_access_enabled' property does not exist please add it. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server#public_network_access_enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_047.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure SQL servers don't have public network access enabled",
                    "description": "Always use Private Endpoint for Azure SQL Database Server and SQL Managed Instance",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HIPAA",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server",
                        "azurerm_mssql_firewall_rule",
                        "azurerm_sql_server"
                    ]
                },
                {
                    "masterTestId": "TEST_MSSQL_SERVER_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sql_servers.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-048",
                            "eval": "data.rule.sql_server_login",
                            "message": "data.rule.sql_server_login_err",
                            "remediationDescription": "In 'azurerm_mssql_server' resource, make sure 'administrator_login' does not contains name like 'Admin/Administrator' to fix the issue. If 'administrator_login' property does not exist please add it. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server#administrator_login' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_048.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure SQL Server administrator login does not contains 'Admin/Administrator' as name",
                    "description": "You must designate a Server admin login when you create an Azure SQL server. SQL server creates this account as a login in the master database. Only one such account can exist. This account connects using SQL Server authentication (username and password). It is recommended to avoid using names like 'admin' or 'administrator', which are targeted in brute force dictionary attacks.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "PCI-DSS",
                                "GDPR",
                                "ISO 27001",
                                "NIST CSF",
                                "HIPAA",
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server",
                        "azurerm_mssql_firewall_rule",
                        "azurerm_sql_server"
                    ]
                },
                {
                    "masterTestId": "TEST_MSSQL_SERVER_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sql_servers.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-068",
                            "eval": "data.rule.mssql_ingress_from_any_ip_disabled",
                            "message": "data.rule.mssql_ingress_from_any_ip_disabled_err",
                            "remediationDescription": "Make sure resource 'azurerm_mssql_server' and 'azurerm_mssql_firewall_rule' exist and in 'azurerm_mssql_firewall_rule' resource, make sure 'start_ip_address' and 'end_ip_address' dont have port range configured to '0.0.0.0' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_firewall_rule#start_ip_address' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_068.py"
                        }
                    ],
                    "severity": "High",
                    "title": "MSSQL Database Server should not allow ingress from all Azure-internal IP addresses (0.0.0.0/0)",
                    "description": "This policy will identify MSSQL Database Server firewall rule that are currently allowing ingress from all Azure-internal IP addresses",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server",
                        "azurerm_mssql_firewall_rule",
                        "azurerm_sql_server"
                    ]
                },
                {
                    "masterTestId": "TEST_MSSQL_SERVER_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sql_servers.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SQL-069",
                            "eval": "data.rule.mssql_server_latest_tls_configured",
                            "message": "data.rule.mssql_server_latest_tls_configured_err",
                            "remediationDescription": "In 'azurerm_mssql_server' resource, set 'min_tls_version = 1.2' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server#minimum_tls_version' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_SQL_069.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure Azure MSSQL Server has latest version of tls configured",
                    "description": "This policy will identify the Azure MSSQL Server which dont have latest version of tls configured and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_mssql_server",
                        "azurerm_mssql_firewall_rule",
                        "azurerm_sql_server"
                    ]
                },
                {
                    "masterTestId": "TEST_STORAGE_ACCOUNT_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(storageaccounts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-STR-003",
                            "eval": "data.rule.storage_secure",
                            "message": "data.rule.storage_secure_err",
                            "remediationDescription": "In 'azurerm_storage_account' resource, set 'enable_https_traffic_only = true' or remove property 'enable_https_traffic_only' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#enable_https_traffic_only' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_STR_003.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Storage Accounts https based secure transfer should be enabled",
                    "description": "The secure transfer option enhances the security of your storage account by only allowing requests to the storage account by a secure connection. For example, when calling REST APIs to access your storage accounts, you must connect using HTTPs. Any requests using HTTP will be rejected when 'secure transfer required' is enabled. When you are using the Azure files service, connection without encryption will fail, including scenarios using SMB 2.1, SMB 3.0 without encryption, and some flavors of the Linux SMB client. Because Azure storage doesn't support HTTPs for custom domain names, this option is not applied when using a custom domain name.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA-CCM",
                                "HIPAA",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_advanced_threat_protection",
                        "azurerm_storage_encryption_scope",
                        "azurerm_storage_account_network_rules",
                        "azurerm_storage_account"
                    ]
                },
                {
                    "masterTestId": "TEST_STORAGE_ACCOUNT_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(storageaccounts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-STR-004",
                            "eval": "data.rule.storage_acl",
                            "message": "data.rule.storage_acl_err",
                            "remediationDescription": "In 'azurerm_storage_account_network_rules' resource or azurerm_storage_account's inner block 'network_rules', set 'default_action = Deny' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account_network_rules#default_action' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_STR_004.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Storage Accounts should have firewall rules enabled",
                    "description": "Turning on firewall rules for your storage account blocks incoming requests for data by default, unless the requests come from a service that is operating within an Azure Virtual Network (VNet). Requests that are blocked include those from other Azure services, from the Azure portal, from logging and metrics services, and so on.<br><br>You can grant access to Azure services that operate from within a VNet by allowing the subnet of the service instance. Enable a limited number of scenarios through the Exceptions mechanism described in the following section. To access the Azure portal, you would need to be on a machine within the trusted boundary (either IP or VNet) that you set up.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "HIPAA",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_advanced_threat_protection",
                        "azurerm_storage_encryption_scope",
                        "azurerm_storage_account_network_rules",
                        "azurerm_storage_account"
                    ]
                },
                {
                    "masterTestId": "TEST_STORAGE_ACCOUNT_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(storageaccounts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-STR-005",
                            "eval": "data.rule.storage_threat_protection",
                            "message": "data.rule.storage_threat_protection_err",
                            "remediationDescription": "In 'azurerm_advanced_threat_protection' resource, set 'enabled = true' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/advanced_threat_protection#enabled' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_STR_005.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Advanced Threat Protection should be enabled for storage account",
                    "description": "Advanced Threat Protection should be enabled for all the storage accounts",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_advanced_threat_protection",
                        "azurerm_storage_encryption_scope",
                        "azurerm_storage_account_network_rules",
                        "azurerm_storage_account"
                    ]
                },
                {
                    "masterTestId": "TEST_STORAGE_ACCOUNTS_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(storageaccounts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-STR-008",
                            "eval": "data.rule.keySource",
                            "message": "data.rule.keySource_err",
                            "remediationDescription": "In 'azurerm_storage_encryption_scope' resource, set 'source = microsoft.keyvault' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_encryption_scope#source' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_STR_008.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure critical data storage in Storage Account is encrypted with Customer Managed Key",
                    "description": "By default, data in the storage account is encrypted using Microsoft Managed Keys at rest. All Azure Storage resources are encrypted, including blobs, disks, files, queues, and tables. All object metadata is also encrypted. However, if you want to control and manage this encryption key yourself, you can specify a customer-managed key, that key is used to protect and control access to the key that encrypts your data. You can also choose to automatically update the key version used for Azure Storage encryption whenever a new version is available in the associated Key Vault.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "Best Practices"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_advanced_threat_protection",
                        "azurerm_storage_encryption_scope",
                        "azurerm_storage_account_network_rules",
                        "azurerm_storage_account"
                    ]
                },
                {
                    "masterTestId": "TEST_STORAGE_ACCOUNTS_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(storageaccounts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-STR-009",
                            "eval": "data.rule.region",
                            "message": "data.rule.region_err",
                            "remediationDescription": "In 'azurerm_storage_account' resource, set value as 'northeurope' or 'westeurope' in property 'location' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#location' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_STR_009.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Storage Accounts location configuration should be inside of Europe",
                    "description": "Identify Storage Accounts outside of the following regions: northeurope, westeurope",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "GDPR"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_advanced_threat_protection",
                        "azurerm_storage_encryption_scope",
                        "azurerm_storage_account_network_rules",
                        "azurerm_storage_account"
                    ]
                },
                {
                    "masterTestId": "TEST_STORAGE_ACCOUNT_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(storageaccounts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-STR-010",
                            "eval": "data.rule.storage_account_public_access_disabled",
                            "message": "data.rule.storage_account_public_access_disabled_err",
                            "remediationDescription": "In 'azurerm_storage_account' resource, set 'allow_blob_public_access = false' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#allow_blob_public_access' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_STR_010.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure that Storage Account should not allow public access to all blobs or containers",
                    "description": "This policy will identify which Storage Account has public access not disabled for all blobs or containers and alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "HIPAA",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_advanced_threat_protection",
                        "azurerm_storage_encryption_scope",
                        "azurerm_storage_account_network_rules",
                        "azurerm_storage_account"
                    ]
                },
                {
                    "masterTestId": "TEST_STORAGE_ACCOUNT_7",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(storageaccounts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-STR-014",
                            "eval": "data.rule.storage_account_queue_logging_enabled_for_all_operation",
                            "message": "data.rule.storage_account_queue_logging_enabled_for_all_operation_err",
                            "remediationDescription": "In 'azurerm_storage_account' resource, set 'read = true', 'write = true', 'delete = true' under 'logging' block which exist under 'queue_properties' block to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#logging' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_STR_014.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Storage Accounts queue service logging should be enabled",
                    "description": "The Azure Storage Queue service logging records details for both successful and failed requests made to the queues, as well as end-to-end latency, server latency, and authentication information.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "HIPAA",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_advanced_threat_protection",
                        "azurerm_storage_encryption_scope",
                        "azurerm_storage_account_network_rules",
                        "azurerm_storage_account"
                    ]
                },
                {
                    "masterTestId": "TEST_STORAGE_ACCOUNT_9",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(storageaccounts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-STR-011",
                            "eval": "data.rule.storage_nr_allow_trusted_azure_services",
                            "message": "data.rule.storage_nr_allow_trusted_azure_services_err",
                            "remediationDescription": "Make sure both 'azurerm_storage_account' and 'azurerm_storage_account_network_rules' exist and in 'azurerm_storage_account_network_rules' resource, add 'AzureServices' value under 'bypass' array property to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account_network_rules#bypass' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_STR_011.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Storage Accounts access should be allowed for trusted Microsoft services",
                    "description": "Ensure that 'Allow trusted Microsoft services to access this storage account' exception is enabled within your Azure Storage account configuration settings to grant access to trusted cloud services.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "HIPAA",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_advanced_threat_protection",
                        "azurerm_storage_encryption_scope",
                        "azurerm_storage_account_network_rules",
                        "azurerm_storage_account"
                    ]
                },
                {
                    "masterTestId": "TEST_STORAGE_ACCOUNT_10",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(storageaccounts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-STR-016",
                            "eval": "data.rule.storage_allow_trusted_azure_services",
                            "message": "data.rule.storage_allow_trusted_azure_services_err",
                            "remediationDescription": "In 'azurerm_storage_account' resource, add 'AzureServices' value under 'bypass' array property which exist under 'network_rules' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#bypass' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_STR_016.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Storage Accounts access should be allowed for trusted Microsoft services",
                    "description": "Ensure that 'Allow trusted Microsoft services to access this storage account' exception is enabled within your Azure Storage account configuration settings to grant access to trusted cloud services.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "HIPAA",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_advanced_threat_protection",
                        "azurerm_storage_encryption_scope",
                        "azurerm_storage_account_network_rules",
                        "azurerm_storage_account"
                    ]
                },
                {
                    "masterTestId": "TEST_STORAGE_ACCOUNT_11",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(storageaccounts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-STR-017",
                            "eval": "data.rule.storage_correct_naming_convention",
                            "message": "data.rule.storage_correct_naming_convention_err",
                            "remediationDescription": "In 'azurerm_storage_account' resource, property 'name' must be between 3 and 24 characters in length and may contain numbers and lowercase letters only to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#name' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_STR_017.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure Storage Account naming rules are correct",
                    "description": "Storage account names must be between 3 and 24 characters in length and may contain numbers and lowercase letters only.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "HIPAA",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_advanced_threat_protection",
                        "azurerm_storage_encryption_scope",
                        "azurerm_storage_account_network_rules",
                        "azurerm_storage_account"
                    ]
                },
                {
                    "masterTestId": "TEST_STORAGE_ACCOUNT_12",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(storageaccounts.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-STR-018",
                            "eval": "data.rule.storage_account_latest_tls_configured",
                            "message": "data.rule.storage_account_latest_tls_configured_err",
                            "remediationDescription": "In 'azurerm_storage_account' resource, set min_tls_version = 'TLS1_2' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#min_tls_version' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_STR_018.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Ensure Azure Storage Account has latest version of tls configured",
                    "description": "This policy will identify the Azure Storage Account which dont have latest version of tls configured and give alert",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "HIPAA",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_advanced_threat_protection",
                        "azurerm_storage_encryption_scope",
                        "azurerm_storage_account_network_rules",
                        "azurerm_storage_account"
                    ]
                },
                {
                    "masterTestId": "TEST_STORAGE_BLOB_CONTAINER",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(storageblobcontainers.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-STR-012",
                            "eval": "data.rule.storage_container_public_access_disabled",
                            "message": "data.rule.storage_container_public_access_disabled_err",
                            "remediationDescription": "In 'azurerm_storage_container' resource, set 'container_access_type = private' or remove the container_access_type property to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_container#container_access_type' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_STR_012.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure storage blob container should not have public access enabled",
                    "description": "'Public access level' allows you to grant anonymous/public read access to a container and the blobs within Azure blob storage. By doing so, you can grant read-only access to these resources without sharing your account key, and without requiring a shared access signature.<br><br>This policy identifies blob containers within an Azure storage account that allow anonymous/public access ('CONTAINER' or 'BLOB') that also have Audit Log Retention set to less than 180 days.<br><br>As a best practice, do not allow anonymous/public access to blob containers unless you have a very good reason. Instead, you should consider using a shared access signature token for providing controlled and time-limited access to blob containers.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_storage_container"
                    ]
                },
                {
                    "masterTestId": "TEST_VIRTUAL_MACHINE_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(vm.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-VM-001",
                            "eval": "data.rule.vm_aset",
                            "message": "data.rule.vm_aset_err",
                            "remediationDescription": "In 'azurerm_virtual_machine' resource, make sure 'availability_set_id' property exist and its value is set from id of 'azurerm_availability_set' resource to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_machine#availability_set_id' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_VM_001.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure Virtual Machine should be assigned to an availability set",
                    "description": "To provide application redundancy during planned or unplanned maintenance events, you can group two or more virtual machines (VMs) in an availability set. An availability set ensures that the VMs are distributed across multiple isolated hardware nodes in a cluster so that only a subset of your VMs are impacted should a hardware or software failure occur on Azure.<br><br>This policy identifies Azure VMs that are not deployed in an availability set. As a high availability (HA) best practice, deploy your VMs in an availability set.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CIS",
                                "CSA CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_virtual_machine",
                        "azurerm_windows_virtual_machine",
                        "azurerm_linux_virtual_machine_scale_set",
                        "azurerm_linux_virtual_machine"
                    ]
                },
                {
                    "masterTestId": "TEST_VIRTUAL_MACHINE_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(vm.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-VM-002",
                            "eval": "data.rule.vm_linux_disabled_password_auth",
                            "message": "data.rule.vm_linux_disabled_password_auth_err",
                            "remediationDescription": "In 'azurerm_virtual_machine' resource, make sure to set 'disable_password_authentication = true' under 'os_profile_linux_config' block to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_machine#disable_password_authentication' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_VM_002.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Linux Instance should not use basic authentication(Use SSH Key Instead)",
                    "description": "For security purpose, linux vm password authentication should be disabled. Use SSH Key Instead.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_virtual_machine",
                        "azurerm_windows_virtual_machine",
                        "azurerm_linux_virtual_machine_scale_set",
                        "azurerm_linux_virtual_machine"
                    ]
                },
                {
                    "masterTestId": "TEST_VIRTUAL_MACHINE_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(vm.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-VM-004",
                            "eval": "data.rule.vm_type_linux_disabled_password_auth",
                            "message": "data.rule.vm_type_linux_disabled_password_auth_err",
                            "remediationDescription": "In 'azurerm_linux_virtual_machine' resource, make sure to set 'disable_password_authentication = true' to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/linux_virtual_machine#disable_password_authentication' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_VM_004.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure Linux Instance should not use basic authentication(Use SSH Key Instead)",
                    "description": "For security purpose, linux vm password authentication should be disabled. Use SSH Key Instead.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_virtual_machine",
                        "azurerm_windows_virtual_machine",
                        "azurerm_linux_virtual_machine_scale_set",
                        "azurerm_linux_virtual_machine"
                    ]
                },
                {
                    "masterTestId": "TEST_VIRTUAL_MACHINE_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(vm.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-VM-005",
                            "eval": "data.rule.vm_type_linux_scale_set_disabled_password_auth",
                            "message": "data.rule.vm_type_linux_scale_set_disabled_password_auth_err",
                            "remediationDescription": "In 'azurerm_linux_virtual_machine_scale_set' resource, make sure to set 'disable_password_authentication = true' to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/linux_virtual_machine_scale_set#disable_password_authentication' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_VM_005.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure Linux scale set should not use basic authentication(Use SSH Key Instead)",
                    "description": "For security purpose, linux scale set password authentication should be disabled. Use SSH Key Instead.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_virtual_machine",
                        "azurerm_windows_virtual_machine",
                        "azurerm_linux_virtual_machine_scale_set",
                        "azurerm_linux_virtual_machine"
                    ]
                },
                {
                    "masterTestId": "TEST_VIRTUAL_MACHINE_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(vm.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-VM-006",
                            "eval": "data.rule.vm_type_linux_disabled_extension_operation",
                            "message": "data.rule.vm_type_linux_disabled_extension_operation_err",
                            "remediationDescription": "In 'azurerm_linux_virtual_machine' resource, make sure to set 'allow_extension_operations = false' to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/linux_virtual_machine#allow_extension_operations' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_VM_006.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure Linux Instance should not allow extension operation",
                    "description": "For security purpose, linux vm extension operation should be disabled.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_virtual_machine",
                        "azurerm_windows_virtual_machine",
                        "azurerm_linux_virtual_machine_scale_set",
                        "azurerm_linux_virtual_machine"
                    ]
                },
                {
                    "masterTestId": "TEST_VIRTUAL_MACHINE_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(vm.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-VM-007",
                            "eval": "data.rule.vm_type_windows_disabled_extension_operation",
                            "message": "data.rule.vm_type_windows_disabled_extension_operation_err",
                            "remediationDescription": "In 'azurerm_windows_virtual_machine' resource, make sure to set 'allow_extension_operations = false' to fix the issue. Please visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/windows_virtual_machine#allow_extension_operations' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_VM_007.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure Windows Instance should not allow extension operation",
                    "description": "For security purpose, windows vm extension operation should be disabled.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_virtual_machine",
                        "azurerm_windows_virtual_machine",
                        "azurerm_linux_virtual_machine_scale_set",
                        "azurerm_linux_virtual_machine"
                    ]
                },
                {
                    "masterTestId": "TEST_VIRTUAL_MACHINE_EXTENSIONS",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(vmextensions.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-VM-003",
                            "eval": "data.rule.vm_protection",
                            "message": "data.rule.vm_protection_err",
                            "remediationDescription": "In 'azurerm_virtual_machine_extension' resource, set type = 'iaasantimalware' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_machine_extension#type' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_VM_003.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Virtual Machine should have endpoint protection installed",
                    "description": "This policy identifies Azure Virtual Machines (VMs) that do not have endpoint protection installed. Installing endpoint protection systems (like Antimalware for Azure) provides for real-time protection capability that helps identify and remove viruses, spyware, and other malicious software. As a best practice, install endpoint protection on all VMs and computers to help identify and remove viruses, spyware, and other malicious software.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_virtual_machine_extension"
                    ]
                },
                {
                    "masterTestId": "TEST_VNET_PEERINGS",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(vnetpeerings.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NET-004",
                            "eval": "data.rule.vnet_peer",
                            "message": "data.rule.vnet_peer_err",
                            "remediationDescription": "In 'azurerm_virtual_network_peering' resource, set 'allow_virtual_network_access = true' or remove 'allow_virtual_network_access' property to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_network_peering#allow_virtual_network_access' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_NET_004.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Azure virtual network peering state should be connected",
                    "description": "Virtual network peering enables you to connect two Azure virtual networks so that the resources in these networks are directly connected.<br><br>This policy identifies Azure virtual network peers that are disconnected. Typically, the disconnection happens when a peering configuration is deleted on one virtual network, and the other virtual network reports the peering status as disconnected.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_virtual_network_peering"
                    ]
                },
                {
                    "masterTestId": "TEST_VNET_SUBNETS",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(vnetsubnets.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NET-005",
                            "eval": "data.rule.vnet_subnet_nsg",
                            "message": "data.rule.vnet_subnet_nsg_err",
                            "remediationDescription": "In 'azurerm_subnet_network_security_group_association' resource, make sure both 'subnet_id' and 'network_security_group_id' property exist and both has id from 'azurerm_subnet' and 'azurerm_network_security_group' resource respectively to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/subnet_network_security_group_association#network_security_group_id' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_NET_005.py"
                        }
                    ],
                    "severity": "High",
                    "title": "Azure Virtual Network subnet should be configured with Network Security Group",
                    "description": "This policy identifies Azure Virtual Network (VNet) subnets that are not associated with a Network Security Group (NSG). While binding an NSG to a network interface of a Virtual Machine (VM) enables fine-grained control to the VM, associating a NSG to a subnet enables better control over network traffic to all resources within a subnet. As a best practice, associate an NSG with a subnet so that you can protect your VMs on a subnet-level.<br><br>For more information, see https://blogs.msdn.microsoft.com/igorpag/2016/05/14/azure-network-security-groups-nsg-best-practices-and-lessons-learned/",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "CSA-CCM",
                                "HITRUST",
                                "NIST 800",
                                "NIST CSF",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_subnet_network_security_group_association",
                        "azurerm_network_security_group",
                        "azurerm_subnet"
                    ]
                },
                {
                    "masterTestId": "TEST_VPN_GATEWAYS",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(vpngateways.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-NET-006",
                            "eval": "data.rule.vpn_encrypt",
                            "message": "data.rule.vpn_encrypt_err",
                            "remediationDescription": "Make sure resource 'azurerm_virtual_network_gateway' and 'azurerm_virtual_network_gateway_connection' exist and in 'azurerm_virtual_network_gateway_connection' resource, set 'use_policy_based_traffic_selectors = true' and make sure 'ipsec_policy' block exist with 'ipsec_encryption' property with value set other than 'none' to fix the issue. Visit <a href='https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_network_gateway_connection#ipsec_encryption' target='_blank'>here</a> for details.",
                            "remediationFunction": "PR_AZR_TRF_NET_006.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure VPN gateways is configured with cryptographic algorithm",
                    "description": "Azure VPN gateways to use a custom IPsec/IKE policy with specific cryptographic algorithms and key strengths, rather than the Azure default policy sets. IPsec and IKE protocol standard supports a wide range of cryptographic algorithms in various combinations. If customers do not request a specific combination of cryptographic algorithms and parameters, Azure VPN gateways use a set of default proposals. Typically due to compliance or security requirements, you can now configure your Azure VPN gateways to use a custom IPsec/IKE policy with specific cryptographic algorithms and key strengths, rather than the Azure default policy sets. It is thus recommended to use custom policy sets and choose strong cryptography.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [
                                "HIPAA",
                                "ISO 27001",
                                "NIST 800",
                                "PCI-DSS"
                            ],
                            "service": [
                                "terraform"
                            ]
                        }
                    ],
                    "resourceTypes": [
                        "azurerm_virtual_network_gateway_connection"
                    ]
                },
                {
                    "masterTestId": "TEST_SECRETS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(secrets.rego)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SEC-001",
                            "eval": "data.rule.gl_azure_secrets",
                            "message": "data.rule.gl_azure_secrets_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_SEC_001.py"
                        }
                    ],
                    "severity": "Medium",
                    "title": "Ensure Secrets are not hardcoded in the template",
                    "description": "Secrets should not be hardcoded in the Template. Make sure to put those secrets in a vault and access from there.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_SECRET_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "python",
                    "rule": "file(secret_tf.py)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SEC-002",
                            "eval": "password_leak",
                            "message": "password_leak_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_SEC_002.py"
                        }
                    ],
                    "severity": "High",
                    "title": "There is a possibility that secure password is exposed",
                    "description": "There is a possibility that secure password is exposed. Make sure to put those secrets in a vault and access from there.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_SECRET_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "python",
                    "rule": "file(secret_tf.py)",
                    "evals": [
                        {
                            "id": "PR-AZR-TRF-SEC-003",
                            "eval": "entropy_password",
                            "message": "entropy_password_err",
                            "remediationDescription": "",
                            "remediationFunction": "PR_AZR_TRF_SEC_003.py"
                        }
                    ],
                    "severity": "High",
                    "title": "There is a possibility that secure password is exposed",
                    "description": "There is a possibility that secure password is exposed. Make sure to put those secrets in a vault and access from there.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "terraform"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}
