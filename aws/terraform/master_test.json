{
    "testSet": [
        {
            "masterTestName": "AWS_terraform_TEST",
            "version": "0.1",
            "cases": [
                {
                    "masterTestId": "TEST_ACM_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(acm.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0001-TRF",
                            "eval": "data.rule.acm_wildcard",
                            "message": "data.rule.acm_wildcard_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS ACM Certificate with wildcard domain name",
                    "description": "This policy identifies ACM Certificates which are using wildcard certificates for wildcard domain name instead of single domain name certificates. ACM allows you to use an asterisk (*) in the domain name to create an ACM Certificate containing a wildcard name that can protect several sites in the same domain. For example, a wildcard certificate issued for *.<compliance-software>.io can match both www.<compliance-software>.io and images.<compliance-software>.io. When you use wildcard certificates, if the private key of a certificate is compromised, then all domain and subdomains that use the compromised certificate are potentially impacted. So it is recommended to use single domain name certificates instead of wildcard certificates to reduce the associated risks with a compromised domain or subdomain.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ACM_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(acm.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0009-TRF",
                            "eval": "data.rule.acm_ct_log",
                            "message": "data.rule.acm_ct_log_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Certificate Manager (ACM) has certificates with Certificate Transparency Logging disabled",
                    "description": "This policy identifies AWS Certificate Manager certificates in which Certificate Transparency Logging is disabled. AWS Certificate Manager (ACM) is the preferred tool to provision, manage, and deploy your server certificates. Certificate Transparency Logging is used to guard against SSL/TLS certificates that are issued by mistake or by a compromised CA, some browsers require that public certificates issued for your domain can also be recorded. This policy generates alerts for certificates which have transparency logging disabled. As a best practice, it is recommended to enable Transparency logging for all certificates.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","HITRUST","NIST 800"],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_CLOUD_FRONT_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudfront.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0015-TRF",
                            "eval": "data.rule.cf_default_cache",
                            "message": "data.rule.cf_default_cache_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS CloudFront Distributions with Field-Level Encryption not enabled",
                    "description": "This policy identifies CloudFront distributions for which field-level encryption is not enabled. Field-level encryption adds an additional layer of security along with HTTPS which protects specific data throughout system processing so that only certain applications can see it.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_CLOUD_FRONT_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudfront.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0016-TRF",
                            "eval": "data.rule.cf_ssl_protocol",
                            "message": "data.rule.cf_ssl_protocol_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS CloudFront distribution is using insecure SSL protocols for HTTPS communication",
                    "description": "CloudFront, a content delivery network (CDN) offered by AWS, is not using a secure cipher for distribution. It is a best security practice to enforce the use of secure ciphers TLSv1.0, TLSv1.1, and/or TLSv1.2 in a CloudFront Distribution's certificate configuration. This policy scans for any deviations from this practice and returns the results.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_CLOUD_FRONT_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudfront.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0017-TRF",
                            "eval": "data.rule.cf_logging",
                            "message": "data.rule.cf_logging_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS CloudFront distribution with access logging disabled",
                    "description": "This policy identifies CloudFront distributions which have access logging disabled. Enabling access log on distributions creates log files that contain detailed information about every user request that CloudFront receives. Access logs are available for web distributions. If you enable logging, you can also specify the Amazon S3 bucket that you want CloudFront to save files in.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_CLOUD_FRONT_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudfront.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0018-TRF",
                            "eval": "data.rule.cf_https_only",
                            "message": "data.rule.cf_https_only_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS CloudFront origin protocol policy does not enforce HTTPS-only",
                    "description": "It is a best security practice to enforce HTTPS-only traffic between a CloudFront distribution and the origin. This policy scans for any deviations from this practice and returns the results.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_CLOUD_FRONT_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudfront.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0019-TRF",
                            "eval": "data.rule.cf_https",
                            "message": "data.rule.cf_https_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS CloudFront viewer protocol policy is not configured with HTTPS",
                    "description": "For web distributions, you can configure CloudFront to require that viewers use HTTPS to request your objects, so connections are encrypted when CloudFront communicates with viewers.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_CLOUD_FRONT_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudfront.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0020-TRF",
                            "eval": "data.rule.cf_min_protocol",
                            "message": "data.rule.cf_min_protocol_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS CloudFront web distribution that allow TLS versions 1.0 or lower",
                    "description": "This policy identifies AWS CloudFront web distributions which are configured with TLS versions for HTTPS communication between viewers and CloudFront. As a best practice, use TLSv1.1_2016 or later as the minimum protocol version in your CloudFront distribution security policies.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_CLOUD_FRONT_7",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudfront.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0021-TRF",
                            "eval": "data.rule.cf_firewall",
                            "message": "data.rule.cf_firewall_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS CloudFront web distribution with AWS Web Application Firewall (AWS WAF) service disabled",
                    "description": "This policy identifies Amazon CloudFront web distributions which have the AWS Web Application Firewall (AWS WAF) service disabled. As a best practice, enable the AWS WAF service on CloudFront web distributions to protect against application layer attacks. To block malicious requests to your Cloudfront Content Delivery Network, define the block criteria in the WAF web access control list (web ACL).",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_CLOUD_FRONT_8",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudfront.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0022-TRF",
                            "eval": "data.rule.cf_default_ssl",
                            "message": "data.rule.cf_default_ssl_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS CloudFront web distribution with default SSL certificate",
                    "description": "This policy identifies CloudFront web distributions which have a default SSL certificate to access CloudFront content. It is a best practice to use custom SSL Certificate to access CloudFront content. It gives you full control over the content data. custom SSL certificates also allow your users to access your content by using an alternate domain name. You can use a certificate stored in AWS Certificate Manager (ACM) or you can use a certificate stored in IAM.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_CLOUD_FRONT_9",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudfront.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0023-TRF",
                            "eval": "data.rule.cf_geo_restriction",
                            "message": "data.rule.cf_geo_restriction_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS CloudFront web distribution with geo restriction disabled",
                    "description": "This policy identifies CloudFront web distributions which have geo restriction feature disabled. Geo Restriction has the ability to block IP addresses based on Geo IP by whitelist or blacklist a country in order to allow or restrict users in specific locations from accessing web application content.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_CLOUD_FRONT_10",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudfront.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0030-TRF",
                            "eval": "data.rule.cf_s3_origin",
                            "message": "data.rule.cf_s3_origin_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Cloudfront Distribution with S3 have Origin Access set to disabled",
                    "description": "This policy identifies the AWS CloudFront distributions which are utilizing S3 bucket and have Origin Access Disabled. The origin access identity feature should be enabled for all your AWS CloudFront CDN distributions in order to restrict any direct access to your objects through Amazon S3 URLs.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_CLOUD_TRAIL_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudtrail.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0026-TRF",
                            "eval": "data.rule.ct_regions",
                            "message": "data.rule.ct_regions_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS CloudTrail is not enabled in all regions",
                    "description": "Checks to ensure that CloudTrail is enabled across all regions. AWS CloudTrail is a service that enables governance, compliance, operational & risk auditing of the AWS account. It is a compliance and security best practice to turn on CloudTrail across different regions to get a complete audit trail of activities across various services.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CIS","GDPR","HIPAA","HITRUST","ISO 27001","NIST 800","NIST CSF","PCI DSS","SOC 2"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_CLOUD_TRAIL_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudtrail.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0027-TRF",
                            "eval": "data.rule.ct_log_validation",
                            "message": "data.rule.ct_log_validation_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS CloudTrail log validation is not enabled in all regions",
                    "description": "This policy identifies AWS CloudTrails in which log validation is not enabled in all regions. CloudTrail log file validation creates a digitally signed digest file containing a hash of each log that CloudTrail writes to S3. These digest files can be used to determine whether a log file was modified after CloudTrail delivered the log. It is recommended that file validation be enabled on all CloudTrails.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CIS","CSA CCM","GDPR","HITRUST","ISO 27001","NIST 800","NIST CSF","SOC 2"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_CLOUD_TRAIL_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudtrail.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0028-TRF",
                            "eval": "data.rule.ct_master_key",
                            "message": "data.rule.ct_master_key_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS CloudTrail logs are not encrypted using Customer Master Keys (CMKs)",
                    "description": "Checks to ensure that CloudTrail logs are encrypted. AWS CloudTrail is a service that enables governance, compliance, operational & risk auditing of the AWS account. It is a compliance and security best practice to encrypt the CloudTrail data since it may contain sensitive information.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CIS","CSA CCM","GDPR","HITRUST","ISO 27001","NIST 800","NIST CSF"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_CLOUD_TRAIL_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(cloudtrail.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0192-TRF",
                            "eval": "data.rule.ct_cloudwatch",
                            "message": "data.rule.ct_cloudwatch_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "CloudTrail trail is not integrated with CloudWatch Log",
                    "description": "Enabling the CloudTrail trail logs integrated with CloudWatch Logs will enable the real-time as well as historic activity logging. This will further effective monitoring and alarm capability.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CIS","CSA CCM","GDPR","HITRUST","ISO 27001","NIST 800","NIST CSF","SOC 2"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_DYNAMO_DB",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dynamodb.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0036-TRF",
                            "eval": "data.rule.dynabodb_encrypt",
                            "message": "data.rule.dynabodb_encrypt_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS DynamoDB encrypted using AWS owned CMK instead of AWS managed CMK",
                    "description": "This policy identifies the DynamoDB tables that use AWS owned CMK (default ) instead of AWS managed CMK (KMS ) to encrypt data. AWS managed CMK provide additional features such as the ability to view the CMK and key policy, and audit the encryption and decryption of DynamoDB tables.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_EBS",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(ebs.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0041-TRF",
                            "eval": "data.rule.ebs_encrypt",
                            "message": "data.rule.ebs_encrypt_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS EBS volumes are not encrypted",
                    "description": "This policy identifies the EBS volumes which are not encrypted. The snapshots that you take of an encrypted EBS volume are also encrypted and can be moved between AWS Regions as needed.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","GDPR","HIPAA","HITRUST","ISO 27001","NIST 800","NIST CSF","PCI DSS"],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_EC2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(ec2.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0042-TRF",
                            "eval": "data.rule.ec2_iam_role",
                            "message": "data.rule.ec2_iam_role_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS EC2 Instance IAM Role not enabled",
                    "description": "AWS provides Identity Access Management (IAM) roles to securely access AWS services and resources. The role is an identity with permission policies that define what the identity can and cannot do in AWS.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_ECS",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(ecs.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0048-TRF",
                            "eval": "data.rule.ecs_exec",
                            "message": "data.rule.ecs_exec_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS ECS/ Fargate task definition execution IAM Role not found",
                    "description": "The execution IAM Role is required by tasks to pull container images and publish container logs to Amazon CloudWatch on your behalf. This policy generates an alert if a task execution role is not found in your task definition.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_EFS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(efs.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0060-TRF",
                            "eval": "data.rule.efs_kms",
                            "message": "data.rule.efs_kms_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elastic File System (EFS) not encrypted using Customer Managed Key",
                    "description": "This policy identifies Elastic File Systems (EFSs) which are encrypted with default KMS keys and not with Keys managed by Customer. It is a best practice to use customer managed KMS Keys to encrypt your EFS data. It gives you full control over the encrypted data.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_EFS_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(efs.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0061-TRF",
                            "eval": "data.rule.efs_encrypt",
                            "message": "data.rule.efs_encrypt_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elastic File System (EFS) with encryption for data at rest disabled",
                    "description": "This policy identifies Elastic File Systems (EFSs) for which encryption for data at rest disabled. It is highly recommended to implement at-rest encryption in order to prevent unauthorized users from reading sensitive data saved to EFS.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_EKS",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(eks.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0050-TRF",
                            "eval": "data.rule.eks_multiple_sg",
                            "message": "data.rule.eks_multiple_sg_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS EKS cluster control plane assigned multiple security groups",
                    "description": "Amazon EKS strongly recommends that you use a dedicated security group for each cluster control plane (one per cluster). This policy checks the number of security groups assigned to your cluster's control plane and alerts if there are more than one.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_ELASTIC_SEARCH_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticsearch.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0074-TRF",
                            "eval": "data.rule.esearch_vpc",
                            "message": "data.rule.esearch_vpc_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS ElasticSearch cluster not in a VPC",
                    "description": "VPC support for Amazon ES is easy to configure, reliable, and offers an extra layer of security. With VPC support, traffic between other services and Amazon ES stays entirely within the AWS network, isolated from the public Internet. You can manage network access using existing VPC security groups, and you can use AWS Identity and Access Management (IAM) policies for additional protection. VPC support for Amazon ES domains is available at no additional charge.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELASTIC_SEARCH_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticsearch.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0076-TRF",
                            "eval": "data.rule.esearch_encrypt",
                            "message": "data.rule.esearch_encrypt_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elasticsearch domain Encryption for data at rest is disabled",
                    "description": "This policy identifies Elasticsearch domains for which encryption is disabled. Encryption of data at rest is required to prevent unauthorized users from accessing the sensitive information available on your Elasticsearch domains components. This may include all data of file systems, primary and replica indices, log files, memory swap files and automated snapshots. The Elasticsearch uses AWS KMS service to store and manage the encryption keys. It is highly recommended to implement encryption at rest when you are working with production data that have sensitive information, to protect from unauthorized access.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","HITRUST","ISO 27001","NIST 800"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELASTIC_SEARCH_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticsearch.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0077-TRF",
                            "eval": "data.rule.esearch_master",
                            "message": "data.rule.esearch_master_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elasticsearch domain has Dedicated master set to disabled",
                    "description": "This policy identifies Elasticsearch domains for which Dedicated master is disabled in your AWS account. If dedicated master nodes are provided those handle the management tasks and cluster nodes can easily manage index and search requests from different types of workload and make them more resilient in production. Dedicated master nodes improve environmental stability by freeing all the management tasks from the cluster data nodes.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELASTIC_SEARCH_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticsearch.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0078-TRF",
                            "eval": "data.rule.esearch_index_slow_log",
                            "message": "data.rule.esearch_index_slow_log_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elasticsearch domain has Index slow logs set to disabled",
                    "description": "This policy identifies Elasticsearch domains for which Index slow logs is disabled in your AWS account. Enabling support for publishing indexing slow logs to AWS CloudWatch Logs enables you have full insight into the performance of indexing operations performed on your Elasticsearch clusters. This will help you in identifying performance issues caused by specific queries or due to changes in cluster usage, so that you can optimize your index configuration to address the problem.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","HITRUST","NIST 800"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELASTIC_SEARCH_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticsearch.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0079-TRF",
                            "eval": "data.rule.esearch_search_slow_log",
                            "message": "data.rule.esearch_search_slow_log_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elasticsearch domain has Search slow logs set to disabled",
                    "description": "This policy identifies Elasticsearch domains for which Search slow logs is disabled in your AWS account. Enabling support for publishing Search slow logs to AWS CloudWatch Logs enables you to have full insight into the performance of search operations performed on your Elasticsearch clusters. This will help you in identifying performance issues caused by specific search queries so that you can optimize your queries to address the problem.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","HITRUST","NIST 800"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELASTIC_SEARCH_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticsearch.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0080-TRF",
                            "eval": "data.rule.esearch_zone_awareness",
                            "message": "data.rule.esearch_zone_awareness_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elasticsearch domain has Zone Awareness set to disabled",
                    "description": "This policy identifies Elasticsearch domains for which Zone Awareness is disabled in your AWS account. Enabling Zone Awareness (cross-zone replication) increases the availability by distributing your Elasticsearch data nodes across two availability zones available in the same AWS region. It also prevents data loss and minimizes downtime in the event of node or availability zone failure.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","NIST 800"],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_ELB_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elb.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0062-TRF",
                            "eval": "data.rule.elb_insecure_cipher",
                            "message": "data.rule.elb_insecure_cipher_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elastic Load Balancer (Classic) SSL negotiation policy configured with insecure ciphers",
                    "description": "This policy identifies Elastic Load Balancers (Classic) which are configured with SSL negotiation policy containing insecure ciphers. An SSL cipher is an encryption algorithm that uses encryption keys to create a coded message. SSL protocols use several SSL ciphers to encrypt data over the Internet. As many of the other ciphers are not secure, it is recommended to use only the ciphers recommended in the following AWS link: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-ssl-security-policy.html.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELB_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elb.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0063-TRF",
                            "eval": "data.rule.elb_insecure_protocol",
                            "message": "data.rule.elb_insecure_protocol_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elastic Load Balancer (Classic) SSL negotiation policy configured with vulnerable SSL protocol",
                    "description": "This policy identifies Elastic Load Balancers (Classic) which are configured with SSL negotiation policy containing vulnerable SSL protocol. The SSL protocol establishes a secure connection between a client and a server and ensures that all the data passed between the client and your load balancer is private. As a security best practice, it is recommended to use the latest version SSL protocol.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELB_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elb.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0064-TRF",
                            "eval": "data.rule.elb_access_log",
                            "message": "data.rule.elb_access_log_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elastic Load Balancer (Classic) with access log disabled",
                    "description": "This policy identifies Classic Elastic Load Balancers which have access log disabled. When Access log enabled, Classic load balancer captures detailed information about requests sent to your load balancer. Each log contains information such as the time the request was received, the client's IP address, latencies, request paths, and server responses. You can use these access logs to analyze traffic patterns and to troubleshoot issues.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELB_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elb.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0065-TRF",
                            "eval": "data.rule.elb_conn_drain",
                            "message": "data.rule.elb_conn_drain_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elastic Load Balancer (Classic) with connection draining disabled",
                    "description": "This policy identifies Classic Elastic Load Balancers which have connection draining disabled. Connection Draining feature ensures that a Classic load balancer stops sending requests to instances that are de-registering or unhealthy, while keeping the existing connections open. This enables the load balancer to complete in-flight requests made to instances that are de-registering or unhealthy.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELB_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elb.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0066-TRF",
                            "eval": "data.rule.elb_crosszone",
                            "message": "data.rule.elb_crosszone_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elastic Load Balancer (Classic) with cross-zone load balancing disabled",
                    "description": "This policy identifies Classic Elastic Load Balancers which have cross-zone load balancing disabled. When Cross-zone load balancing enabled, classic load balancer distributes requests evenly across the registered instances in all enabled Availability Zones. Cross-zone load balancing reduces the need to maintain equivalent numbers of instances in each enabled Availability Zone, and improves your application's ability to handle the loss of one or more instances.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELB_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elb.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0068-TRF",
                            "eval": "data.rule.elb_sec_group",
                            "message": "data.rule.elb_sec_group_err",
                            "remediationDescription":"",
                            "remediationFunction":"" 
                        }
                    ],
                    "title": "AWS Elastic Load Balancer (ELB) has security group with no outbound rules",
                    "description": "This policy identifies Elastic Load Balancers (ELB) which have security group with no outbound rules. A security group with no outbound rule will deny all outgoing requests. ELB security groups should have at least one outbound rule, ELB with no outbound permissions will deny all traffic going to any EC2 instances or resources configured behind that ELB; in other words, the ELB is useless without outbound permissions.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELB_7",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elb.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0069-TRF",
                            "eval": "data.rule.elb_not_in_use",
                            "message": "data.rule.elb_not_in_use_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elastic Load Balancer (ELB) not in use",
                    "description": "This policy identifies unused Elastic Load Balancers (ELBs) in your AWS account. Any Elastic Load Balancer in your AWS account is adding charges to your monthly bill, although it is not used by any resources. As a best practice, it is recommended to remove ELBs that are not associated with any instances, it will also help you avoid unexpected charges on your bill.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["ISO 27001"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELB_8",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elb.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0072-TRF",
                            "eval": "data.rule.elb_alb_logs",
                            "message": "data.rule.elb_alb_logs_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elastic Load Balancer v2 (ELBv2) Application Load Balancer (ALB) with access log disabled",
                    "description": "This policy identifies ELBv2 ALBs which have access log disabled. Access logs capture detailed information about requests sent to your load balancer and each log contains information such as the time the request was received, the client's IP address, latencies, request paths, and server responses. You can use these access logs to analyze traffic patterns and troubleshoot issues.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELB_9",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elb.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0073-TRF",
                            "eval": "data.rule.elb_listener_ssl",
                            "message": "data.rule.elb_listener_ssl_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Elastic Load Balancer with listener TLS/SSL disabled",
                    "description": "This policy identifies Elastic Load Balancers which have listener TLS/SSL disabled. As Load Balancers will be handling all incoming requests and routing the traffic accordingly; The listeners on the load balancers should always receive traffic over secure channel with a valid SSL certificate configured.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","GDPR","HITRUST","ISO 27001","NIST 800","NIST CSF","SOC 2"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_ELB_10",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elb.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0006-TRF",
                            "eval": "data.rule.elb_over_https",
                            "message": "data.rule.elb_over_https_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Application Load Balancer (ALB) listener that allow connection requests over HTTP",
                    "description": "This policy identifies Application Load Balancer (ALB) listeners that are configured to accept connection requests over HTTP instead of HTTPS. As a best practice, use the HTTPS protocol to encrypt the communication between the application clients and the application load balancer.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_LAMBDA_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(lambda.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0105-TRF",
                            "eval": "data.rule.lambda_env",
                            "message": "data.rule.lambda_env_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Lambda Environment Variables not encrypted at-rest using CMK",
                    "description": "When you create or update Lambda functions that use environment variables, AWS Lambda encrypts them using the AWS Key Management Service. When your Lambda function is invoked, those values are decrypted and made available to the Lambda code._x000D__x000D_This policy verifies that Lambda function uses the AMS Key Management Service to encrypt variables at-rest with CMK.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_LAMBDA_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(lambda.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0106-TRF",
                            "eval": "data.rule.lambda_vpc",
                            "message": "data.rule.lambda_vpc_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Lambda Function is not assigned to access within VPC",
                    "description": "This policy identifies the AWS Lambda functions which do not have access within the VPC. Amazon Lambda functions should have access to VPC-only resources such as AWS Redshift data warehouses, AWS ElastiCache clusters, AWS RDS database instances, and service endpoints that should be only accessible from within a particular Virtual Private Cloud (VPC).",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_LAMBDA_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(lambda.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0107-TRF",
                            "eval": "data.rule.lambda_tracing",
                            "message": "data.rule.lambda_tracing_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Lambda functions with tracing not enabled",
                    "description": "TracingConfig is a property of the AWS::Lambda::Function resource that configures tracing settings for your AWS Lambda (Lambda) function. When enabled, AWS Lambda tracing acitivates AWS X-Ray service that collects information on requests that a specific function performed. It reduces the time and effort for debugging and diagnosing the errors._x000D__x000D_The value can be either PassThrough or Active. If PassThrough, Lambda will only trace the request from an upstream service if it contains a tracing header with 'sampled=1'. If Active, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["HITRUST","NIST 800"],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_RDS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0119-TRF",
                            "eval": "data.rule.rds_cluster_encrypt",
                            "message": "data.rule.rds_cluster_encrypt_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS RDS DB cluster encryption is disabled",
                    "description": "This policy identifies RDS DB clusters for which encryption is disabled. Amazon Aurora encrypted DB clusters provide an additional layer of data protection by securing your data from unauthorized access to the underlying storage. You can use Amazon Aurora encryption to increase data protection of your applications deployed in the cloud, and to fulfill compliance requirements for data-at-rest encryption._x000D_NOTE: This policy is applicable only for Aurora DB clusters._x000D_https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-clusters.html",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_RDS_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0121-TRF",
                            "eval": "data.rule.rds_public",
                            "message": "data.rule.rds_public_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS RDS database instance is publicly accessible",
                    "description": "This policy identifies RDS database instances which are publicly accessible.DB instances should not be publicly accessible to protect the integrety of data.Public accessibility of DB instances can be modified by turning on or off the Public accessibility parameter.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","HITRUST","ISO 27001","NIST 800"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_RDS_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0125-TRF",
                            "eval": "data.rule.rds_encrypt",
                            "message": "data.rule.rds_encrypt_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS RDS instance is not encrypted",
                    "description": "This policy identifies AWS RDS instances which are not encrypted. Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up and manage databases. Amazon allows customers to turn on encryption for RDS which is recommended for compliance and security reasons.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","GDPR","HIPAA","HITRUST","ISO 27001","NIST 800","NIST CSF","PCI DSS"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_RDS_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0127-TRF",
                            "eval": "data.rule.rds_multiaz",
                            "message": "data.rule.rds_multiaz_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS RDS instance with Multi-Availability Zone disabled",
                    "description": "This policy identifies RDS instances which have Multi-Availability Zone(Multi-AZ) disabled. When RDS DB instance is enabled with Multi-AZ, RDS automatically creates a primary DB Instance and synchronously replicates the data to a standby instance in a different availability zone. These Multi-AZ deployments will improve primary node reachability by providing read replica in case of network connectivity loss or loss of availability in the primaryâ€™s availability zone for read/write operations, so by making them the best fit for production database workloads.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_RDS_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0128-TRF",
                            "eval": "data.rule.rds_snapshot",
                            "message": "data.rule.rds_snapshot_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        } 
                    ],
                    "title": "AWS RDS instance with copy tags to snapshots disabled",
                    "description": "This policy identifies RDS instances which have copy tags to snapshots disabled. Copy tags to snapshots copies all the user-defined tags from the DB instance to snapshots. Copying tags allow you to add metadata and apply access policies to your Amazon RDS resources.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_RDS_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0129-TRF",
                            "eval": "data.rule.rds_backup",
                            "message": "data.rule.rds_backup_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS RDS instance without Automatic Backup setting",
                    "description": "This policy identifies RDS instances which are not set with the Automatic Backup setting. If Automatic Backup is set, RDS creates a storage volume snapshot of your DB instance, backing up the entire DB instance and not just individual databases which provide for point-in-time recovery. The automatic backup will happen during the specified backup window time and keeps the backups for a limited period of time as defined in the retention period. It is recommended to set Automatic backups for your critical RDS servers that will help in the data restoration process.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_RDS_7",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0130-TRF",
                            "eval": "data.rule.rds_upgrade",
                            "message": "data.rule.rds_upgrade_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS RDS minor upgrades not enabled",
                    "description": "When Amazon Relational Database Service (Amazon RDS) supports a new version of a database engine, you can upgrade your DB instances to the new version. There are two kinds of upgrades: major version upgrades and minor version upgrades. Minor upgrades helps maintain a secure and stable RDS with minimal impact on the application. For this reason, we recommend that your automatic minor upgrade is enabled. Minor version upgrades only occur automatically if a minor upgrade replaces an unsafe version, such as a minor upgrade that contains bug fixes for a previous version.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_RDS_8",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0131-TRF",
                            "eval": "data.rule.rds_retention",
                            "message": "data.rule.rds_retention_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS RDS retention policy less than 7 days",
                    "description": "RDS Retention Policies for Backups are an important part of your DR/BCP strategy. Recovering data from catastrophic failures, malicious attacks, or corruption often requires a several day window of potentially good backup material to leverage. As such, the best practice is to ensure your RDS clusters are retaining at least 7 days of backups, if not more (up to a maximum of 35).",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_RED_SHIFT_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(redshift.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0133-TRF",
                            "eval": "data.rule.redshift_encrypt_key",
                            "message": "data.rule.redshift_encrypt_key_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Redshift Cluster not encrypted using Customer Managed Key",
                    "description": "This policy identifies Redshift Clusters which are encrypted with default KMS keys and not with Keys managed by Customer. It is a best practice to use customer managed KMS Keys to encrypt your Redshift databases data. Customer-managed CMKs give you more flexibility, including the ability to create, rotate, disable, define access control for, and audit the encryption keys used to help protect your data.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_RED_SHIFT_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(redshift.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0134-TRF",
                            "eval": "data.rule.redshift_public",
                            "message": "data.rule.redshift_public_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Redshift clusters should not be publicly accessible",
                    "description": "This policy identifies AWS Redshift clusters which are accessible publicly.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","GDPR","HITRUST","ISO 27001","NIST 800","SOC 2"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_RED_SHIFT_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(redshift.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0135-TRF",
                            "eval": "data.rule.redshift_audit",
                            "message": "data.rule.redshift_audit_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Redshift database does not have audit logging enabled",
                    "description": "Audit logging is not enabled by default in Amazon Redshift. When you enable logging on your cluster, Amazon Redshift creates and uploads logs to Amazon S3 that capture data from the creation of the cluster to the present time.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","GDPR","HITRUST","ISO 27001","NIST 800","SOC 2"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_RED_SHIFT_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(redshift.rego)",
                    "evals": [
                       {
                            "id":"PR-AWS-0136-TRF",
                            "eval": "data.rule.redshift_require_ssl",
                            "message": "data.rule.redshift_require_ssl_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Redshift does not have require_ssl configured",
                    "description": "This policy identifies Redshift databases in which data connection to and from is occurring on an insecure channel. SSL connections ensures the security of the data in transit.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","GDPR","HITRUST","ISO 27001","NIST 800"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_RED_SHIFT_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(redshift.rego)",
                    "evals": [
                       {
                            "id":"PR-AWS-0137-TRF",
                            "eval": "data.rule.redshift_encrypt",
                            "message": "data.rule.redshift_encrypt_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Redshift instances are not encrypted",
                    "description": "This policy identifies AWS Redshift instances which are not encrypted. These instances should be encrypted for clusters to help protect data at rest which otherwise can result in a data breach.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","GDPR","HITRUST","ISO 27001","NIST 800","NIST CSF","PCI DSS"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_S3_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(s3.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0004-TRF",
                            "eval": "data.rule.s3_accesslog",
                            "message": "data.rule.s3_accesslog_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        
                        }
                    ],
                    "title": "AWS Access logging not enabled on S3 buckets",
                    "description": "Checks for S3 buckets without access logging turned on. Access logging allows customers to view complete audit trail on sensitive workloads such as S3 buckets. It is recommended that Access logging is turned on for all S3 buckets to meet audit & compliance requirement",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","GDPR","HITRUST","NIST 800","PCI DSS","SOC 2"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_S3_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(s3.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0140-TRF",
                            "eval": "data.rule.s3_acl_delete",
                            "message": "data.rule.s3_acl_delete_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        
                        }
                    ],
                    "title": "AWS S3 Bucket has Global DELETE Permissions enabled via bucket policy",
                    "description": "This policy identifies the S3 Bucket(s) which will allow any unauthenticated user to DELETE objects from a bucket. These permissions permit anyone, malicious or not, to DELETE objects from your S3 bucket if they can guess the namespace. Since the S3 service does not protect the namespace other than with ACLs and Bucket Policy, you risk loss or compromise of critical data by leaving this open.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_S3_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(s3.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0141-TRF",
                            "eval": "data.rule.s3_acl_get",
                            "message": "data.rule.s3_acl_get_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS S3 Bucket has Global GET Permissions enabled via bucket policy",
                    "description": "This policy identifies the S3 Bucket(s) which will allow any unauthenticated user to GET objects from a bucket. These permissions permit anyone, malicious or not, to GET objects from your S3 bucket if they can guess the namespace. Since the S3 service does not protect the namespace other than with ACLs and Bucket Policy, you risk loss or compromise of critical data by leaving this open.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_S3_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(s3.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0142-TRF",
                            "eval": "data.rule.s3_acl_list",
                            "message": "data.rule.s3_acl_list_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS S3 Bucket has Global LIST Permissions enabled via bucket policy",
                    "description": "This policy identifies the S3 Bucket(s) which will allow any unauthenticated user to LIST objects from a bucket. These permissions permit anyone, malicious or not, to LIST objects from your S3 bucket if they can guess the namespace. Since the S3 service does not protect the namespace other than with ACLs and Bucket Policy, you risk loss or compromise of critical data by leaving this open.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_S3_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(s3.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0143-TRF",
                            "eval": "data.rule.s3_acl_put",
                            "message": "data.rule.s3_acl_put_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS S3 Bucket has Global PUT Permissions enabled via bucket policy",
                    "description": "This policy identifies the S3 Bucket(s) which will allow any unauthenticated user to PUT objects into a bucket. These permissions permit anyone, malicious or not, to PUT objects into your S3 bucket if they can guess the namespace. Since the S3 service does not protect the namespace other than with ACLs and Bucket Policy, you risk compromise of critical data by leaving this open.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_S3_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(s3.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0145-TRF",
                            "eval": "data.rule.s3_versioning",
                            "message": "data.rule.s3_versioning_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS S3 Object Versioning is disabled",
                    "description": "This policy identifies the S3 buckets which have Object Versioning disabled. S3 Object Versioning is an important capability in protecting your data within a bucket. Once you enable Object Versioning, you cannot remove it; you can suspend Object Versioning at any time on a bucket if you do not wish for it to persist. It is recommended to enable Object Versioning on S3.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_S3_7",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(s3.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0148-TRF",
                            "eval": "data.rule.s3_transport",
                            "message": "data.rule.s3_transport_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS S3 bucket not configured with secure data transport policy",
                    "description": "This policy identifies S3 buckets which are not configured with secure data transport policy. AWS S3 buckets should enforce encryption of data over the network using Secure Sockets Layer (SSL). It is recommended to add a bucket policy that explicitly denies (Effect: Deny) all access (Action: s3:*) from anybody who browses (Principal: *) to Amazon S3 objects within an Amazon S3 bucket if they are not accessed through HTTPS (aws:SecureTransport: false).",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_S3_8",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(s3.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0196-TRF",
                            "eval": "data.rule.s3_website",
                            "message": "data.rule.s3_website_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "S3 buckets with configurations set to host websites",
                    "description": "To host a website on AWS S3 you should configure a bucket as a website. This policy identifies all the S3 buckets that are configured to host websites. By frequently surveying these S3 buckets you can ensure that only authorized buckets are enabled to host websites. Make sure to disable static website hosting for unauthorized S3 buckets.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["ISO 27001"],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_SECURITY_GROUP_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0175-TRF",
                            "eval": "data.rule.port_135",
                            "message": "data.rule.port_135_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to Windows RPC port (135)",
                    "description": "This policy identifies the security groups which are exposing Windows RPC port (135) to the internet. It is recommended that Global permission to access the well known services Windows RPC port (135) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0165-TRF",
                            "eval": "data.rule.port_137",
                            "message": "data.rule.port_137_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to NetBIOS port (137)",
                    "description": "This policy identifies the security groups which are exposing NetBIOS port (137) to the internet. It is recommended that Global permission to access the well known services NetBIOS port (137) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0166-TRF",
                            "eval": "data.rule.port_138",
                            "message": "data.rule.port_138_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to NetBIOS port (138)",
                    "description": "This policy identifies the security groups which are exposing NetBIOS port (138) to the internet. It is recommended that Global permission to access the well known services NetBIOS port (138) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_4",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0170-TRF",
                            "eval": "data.rule.port_1433",
                            "message": "data.rule.port_1433_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to SQLServer port (1433)",
                    "description": "This policy identifies the security groups which are exposing SQLServer port (1433) to the internet. It is recommended that Global permission to access the well known services SQLServer port (1433) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_5",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0171-TRF",
                            "eval": "data.rule.port_1434",
                            "message": "data.rule.port_1434_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to SQLServer port (1434)",
                    "description": "This policy identifies the security groups which are exposing SQLServer port (1434) to the internet. It is recommended that Global permission to access the well known services SQLServer port (1434) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_6",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0162-TRF",
                            "eval": "data.rule.port_20",
                            "message": "data.rule.port_20_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to FTP-Data port (20)",
                    "description": "This policy identifies the security groups which are exposing FTP-Data port (20) to the internet. It is recommended that Global permission to access the well known services FTP-Data port (20) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_7",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0161-TRF",
                            "eval": "data.rule.port_21",
                            "message": "data.rule.port_21_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to FTP port (21)",
                    "description": "This policy identifies the security groups which are exposing FTP port (21) to the internet. It is recommended that Global permission to access the well known services FTP port (21) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_8",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0176-TRF",
                            "eval": "data.rule.port_22",
                            "message": "data.rule.port_22_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic to SSH port (22)",
                    "description": "This policy identifies AWS Security Groups which do allow inbound traffic on SSH port (22) from public internet. Doing so, may allow a bad actor to brute force their way into the system and potentially get access to the entire network.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CIS","CSA CCM","GDPR","HIPAA","HITRUST","ISO 27001","NIST 800","NIST CSF","SOC 2"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_9",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0172-TRF",
                            "eval": "data.rule.port_23",
                            "message": "data.rule.port_23_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to Telnet port (23)",
                    "description": "This policy identifies the security groups which are exposing Telnet port (23) to the internet. It is recommended that Global permission to access the well known services Telnet port (23) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_10",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
            "id":"PR-AWS-0169-TRF",
            "eval": "data.rule.port_25",
            "message": "data.rule.port_25_err",
            "remediationDescription":"",
            "remediationFunction":""
        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to SMTP port (25)",
                    "description": "This policy identifies the security groups which are exposing SMTP port (25) to the internet. It is recommended that Global permission to access the well known services SMTP port (25) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_11",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0164-TRF",
                            "eval": "data.rule.port_3306",
                            "message": "data.rule.port_3306_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to MYSQL port (3306)",
                    "description": "This policy identifies the security groups which are exposing MYSQL port (3306) to the internet. It is recommended that Global permission to access the well known services MYSQL port (3306) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_12",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0168-TRF",
                            "eval": "data.rule.port_3389",
                            "message": "data.rule.port_3389_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to RDP port (3389)",
                    "description": "This policy identifies the security groups which is exposing RDP port (3389) to the internet. Security Groups do not allow inbound traffic on RDP port (3389) from public internet. Doing so, may allow a bad actor to brute force their way into the system and potentially get access to the entire network.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CIS","CSA CCM","GDPR","HIPAA","HITRUST","ISO 27001","NIST 800","NIST CSF","SOC 2"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_13",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0163-TRF",
                            "eval": "data.rule.port_4333",
                            "message": "data.rule.port_4333_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to MSQL port (4333)",
                    "description": "This policy identifies the security groups which are exposing MSQL port (4333) to the internet. It is recommended that Global permission to access the well known services MSQL port (4333) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_14",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0159-TRF",
                            "eval": "data.rule.port_445",
                            "message": "data.rule.port_445_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to CIFS port (445)",
                    "description": "This policy identifies the security groups which are exposing CIFS port (445) to the internet. It is recommended that Global permission to access the well known services CIFS port (445) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_15",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0160-TRF",
                            "eval": "data.rule.port_53",
                            "message": "data.rule.port_53_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to DNS port (53)",
                    "description": "This policy identifies the security groups which are exposing DNS port (53) to the internet. It is recommended that Global permission to access the well known services DNS port (53) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_16",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0167-TRF",
                            "eval": "data.rule.port_5432",
                            "message": "data.rule.port_5432_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to PostgreSQL port (5432)",
                    "description": "This policy identifies the security groups which are exposing PostgreSQL port (5432) to the internet. It is recommended that Global permission to access the well known services PostgreSQL port (5432) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_17",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0173-TRF",
                            "eval": "data.rule.port_5500",
                            "message": "data.rule.port_5500_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to VNC Listener port (5500)",
                    "description": "This policy identifies the security groups which are exposing VNC Listener port (5500) to the internet. It is recommended that Global permission to access the well known services VNC Listener port (5500) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_18",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0174-TRF",
                            "eval": "data.rule.port_5900",
                            "message": "data.rule.port_5900_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups allow internet traffic from internet to VNC Server port (5900)",
                    "description": "This policy identifies the security groups which are exposing VNC Server port (5900) to the internet. It is recommended that Global permission to access the well known services VNC Server port (5900) should not be allowed in a security group.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_19",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0035-TRF",
                            "eval": "data.rule.port_all",
                            "message": "data.rule.port_all_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Default Security Group does not restrict all traffic",
                    "description": "This policy identifies the default security group which does not restrict all inbound and outbound traffic. A VPC comes with a default security group whose initial configuration deny all inbound traffic from internet and allow all outbound traffic. If you do not specify a security group when you launch an instance, the instance is automatically assigned to this default security group. As a result, the instance may accidentally send outbound traffic.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CIS","CSA CCM","GDPR","HITRUST","NIST 800","NIST CSF","SOC 2"],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SECURITY_GROUP_20",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(securitygroup.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0178-TRF",
                            "eval": "data.rule.port_proto_all",
                            "message": "data.rule.port_proto_all_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS Security Groups with Inbound rule overly permissive to All Traffic",
                    "description": "This policy identifies AWS Security Groups which do allow inbound traffic on all protocols from public internet. Doing so, may allow a bad actor to brute force their way into the system and potentially get access to the entire network.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_SNS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sns.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0152-TRF",
                            "eval": "data.rule.sns_protocol",
                            "message": "data.rule.sns_protocol_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS SNS subscription is not configured with HTTPS",
                    "description": "This policy identifies SNS subscriptions using HTTP instead of HTTPS as the delivery protocol in order to enforce SSL encryption for all subscription requests. It is strongly recommended use only HTTPS-based subscriptions by implementing secure SNS topic policies.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SNS_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sns.rego)",
                    "evals": [
                       {
                            "id":"PR-AWS-0153-TRF",
                            "eval": "data.rule.sns_encrypt_key",
                            "message": "data.rule.sns_encrypt_key_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS SNS topic encrypted using default KMS key instead of CMK",
                    "description": "This policy identifies Amazon Simple Notification Service (SNS) topics that are encrypted with the default AWS Key Management Service (KMS) keys. As a best practice, use Customer Master Keys (CMK) to encrypt the data in your SNS topics and ensure full control over your data.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SNS_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sns.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0154-TRF",
                            "eval": "data.rule.sns_encrypt",
                            "message": "data.rule.sns_encrypt_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS SNS topic with server-side encryption disabled",
                    "description": "This policy identifies Amazon Simple Notification Service (SNS) topics that have server-side encryption disabled. As a best practice, enable server-side encryption for at-rest encryption of message content published to SNS topics. When you publish a message, the SNS encrypts your message as soon as it receives it, and decrypts it just prior to delivery.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_SQS_1",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sqs.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0155-TRF",
                            "eval": "data.rule.sqs_deadletter",
                            "message": "data.rule.sqs_deadletter_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS SQS does not have a dead letter queue configured",
                    "description": "This policy identifies AWS Simple Queue Services (SQS) which does not have dead letter queue configured. Dead letter queues are useful for debugging your application or messaging system because they let you isolate problematic messages to determine why their processing doesn't succeed.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SQS_2",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sqs.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0156-TRF",
                            "eval": "data.rule.sqs_encrypt_key",
                            "message": "data.rule.sqs_encrypt_key_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS SQS queue encryption using default KMS key instead of CMK",
                    "description": "This policy identifies CloudFront web distributions which have a default SSL certificate to access CloudFront content. It is a best practice to use custom SSL Certificate to access CloudFront content. It gives you full control over the content data. custom SSL certificates also allow your users to access your content by using an alternate domain name. You can use a certificate stored in AWS Certificate Manager (ACM) or you can use a certificate stored in IAM.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },{
                    "masterTestId": "TEST_SQS_3",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sqs.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0157-TRF",
                            "eval": "data.rule.sqs_encrypt",
                            "message": "data.rule.sqs_encrypt_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS SQS server side encryption not enabled",
                    "description": "SSE lets you transmit sensitive data in encrypted queues. SSE protects the contents of messages in Amazon SQS queues using keys managed in the AWS Key Management Service (AWS KMS). SSE encrypts messages as soon as Amazon SQS receives them. The messages are stored in encrypted form and Amazon SQS decrypts messages only when they are sent to an authorized consumer._x000D__x000D_SQS SSE and the AWS KMS security standards can help you meet encryption-related compliance requirements.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": []
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_VPC",
                    "masterSnapshotId": [
                        "TRF_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(vpc.rego)",
                    "evals": [
                        {
                            "id":"PR-AWS-0184-TRF",
                            "eval": "data.rule.vpc_subnet_autoip",
                            "message": "data.rule.vpc_subnet_autoip_err",
                            "remediationDescription":"",
                            "remediationFunction":""
                        }
                    ],
                    "title": "AWS VPC subnets should not allow automatic public IP assignment",
                    "description": "This policy identifies VPC subnets which allow automatic public IP assignment. VPC subnet is a part of the VPC having its own rules for traffic. Assigning the Public IP to the subnet automatically (on launch) can accidentally expose the instances within this subnet to internet and should be edited to 'No' post creation of the Subnet.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": ["CSA CCM","GDPR","HITRUST","ISO 27001","NIST 800","NIST CSF"],
                            "service": []
                        }
                    ]
                }
            ]
        }
    ]
}